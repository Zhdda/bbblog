<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>探索了解自定义View中属性 style theme的关系</title>
      <link href="%E6%8E%A2%E7%B4%A2%E4%BA%86%E8%A7%A3%E8%87%AA%E5%AE%9A%E4%B9%89View%E4%B8%AD%E5%B1%9E%E6%80%A7style&amp;theme%E7%9A%84%E5%85%B3%E7%B3%BB.html"/>
      <url>%E6%8E%A2%E7%B4%A2%E4%BA%86%E8%A7%A3%E8%87%AA%E5%AE%9A%E4%B9%89View%E4%B8%AD%E5%B1%9E%E6%80%A7style&amp;theme%E7%9A%84%E5%85%B3%E7%B3%BB.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>日常开发中我们经常会遇到自定义view的情形，我们首先就会覆盖View的三个或者四个构造方法；如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyView</span> <span class="token keyword">extends</span> <span class="token class-name">View</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleRes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">,</span> defStyleRes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上述四个构造方法相信因为各种各样的原因我们只关注了前两个参数，context 和 attrs并且准确的知道他们是干啥的。但是后面的两个参数很少用到，甚至根本就不知道干啥用的。我也是在观摩别人的库中使用到了后面的两个参数才研究了一下。研究一下之后有了关于app主题的很多想法，顺便会写到此文。因为后面两个参数一方面会大大节省我们的开发工作量，另一方面和主题(theme)和风格（style）配合，我们可以让我们的app切换各种样式有了高效率的可能性，顺便可以说app 的ui组件可以作为平台化的产品，快速应用在新的app中，只需要改几个样式，整个app就不一样了。<br>1.关于自定义View的属性<br>一般情况下我们自定义view的属性大概经历以下几个步骤；<br>1.定义<br>在res/values/目录下新建或者在现有的attrs.xml中定义相对应的styleable,我们都使用string类型做为例子，其他类型大家类比即可。</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>declare-styleable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyView<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attr1<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attr2<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attr3<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attr4<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attr5<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attr6<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attr7<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>declare-styleable</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><p>2.在java代码中获取相应的属性值</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyView</span> <span class="token keyword">extends</span> <span class="token class-name">View</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span>  <span class="token keyword">static</span> String TAG <span class="token operator">=</span> <span class="token string">"MyView"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>attrs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>attrs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleRes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">,</span> defStyleRes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">,</span> defStyleRes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleRes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TypedArray typedArray <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">obtainStyledAttributes</span><span class="token punctuation">(</span>attrs<span class="token punctuation">,</span> R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">,</span> defStyleRes<span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"attr1 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_attr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"attr2 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_attr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"attr3 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_attr3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"attr4 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_attr4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"attr5 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_attr5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"attr6 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_attr6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"attr7 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_attr7<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        typedArray<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.在布局中使用属性</p><pre class=" language-xml"><code class="language-xml">  &lt;com.example.customviewattrs.MyView        app:attr1 = "布局中"        app:attr2 = "布局中"        app:attr3 = "布局中"        app:attr4 = "布局中"        app:attr5 = "布局中"        app:attr6 = "布局中"        app:attr7 = "布局中"       android:layout_width="wrap_content"       android:layout_height="wrap_content"       android:text="@string/next"/></code></pre><p>经过3个步骤我们通常就已经完成了自定义view属性相关的开发工作。我们运行工程，打印log,发现所有属性都能成功获取，然而到这里完全没有完。</p><pre><code>2021-01-22 17:41:40.020 17397-17397/com.example.customviewattrs E/MyView: attr1 - &gt;布局中2021-01-22 17:41:40.020 17397-17397/com.example.customviewattrs E/MyView: attr2 - &gt;布局中2021-01-22 17:41:40.020 17397-17397/com.example.customviewattrs E/MyView: attr3 - &gt;布局中2021-01-22 17:41:40.020 17397-17397/com.example.customviewattrs E/MyView: attr4 - &gt;布局中2021-01-22 17:41:40.020 17397-17397/com.example.customviewattrs E/MyView: attr5 - &gt;布局中2021-01-22 17:41:40.020 17397-17397/com.example.customviewattrs E/MyView: attr6 - &gt;布局中2021-01-22 17:41:40.020 17397-17397/com.example.customviewattrs E/MyView: attr7 - &gt;布局中</code></pre><p>几个问题<br>1 attrs.xml中的attr 必须用declare-styleable包起来么<br>不包起来也可以。但我们使用的时候会有些麻烦，体验过麻烦过后就知道我们包起来的意义了。代码如下：</p><pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;resources&gt;&lt;!--    &lt;declare-styleable name="MyView"&gt;--&gt;        &lt;attr name="attr1" format="string"/&gt;        &lt;attr name="attr2" format="string"/&gt;        &lt;attr name="attr3" format="string"/&gt;        &lt;attr name="attr4" format="string"/&gt;        &lt;attr name="attr5" format="string"/&gt;        &lt;attr name="attr6" format="string"/&gt;        &lt;attr name="attr7" format="string"/&gt;&lt;!--    &lt;/declare-styleable&gt;--&gt;&lt;/resources&gt;</code></pre><p>布局中。注意我们需要自己定另外的命名空间：xmlns:zh=”<a href="http://schemas.android.com/apk/res-auto&quot;">http://schemas.android.com/apk/res-auto"</a></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.example.customviewattrs.MyView</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/next<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">zh:</span>attr1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>布局中<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">zh:</span>attr2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>布局中<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">zh:</span>attr3</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>布局中<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">zh:</span>attr4</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>布局中<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">zh:</span>attr5</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>布局中<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">zh:</span>attr6</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>布局中<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">zh:</span>attr7</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>布局中<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>重点看下获取属性的代码麻烦很多。而且会有些爆红，但能运行，说明android 不建议这么做</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyView</span> <span class="token keyword">extends</span> <span class="token class-name">View</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String TAG <span class="token operator">=</span> <span class="token string">"MyView"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//手动定义attr数组</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> attrsDefine <span class="token operator">=</span> <span class="token punctuation">{</span>R<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>attr1<span class="token punctuation">,</span> R<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>attr2<span class="token punctuation">,</span> R<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>attr3<span class="token punctuation">,</span> R<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>attr4<span class="token punctuation">,</span> R<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>attr5<span class="token punctuation">,</span> R<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>attr6<span class="token punctuation">,</span> R<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>attr7<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleRes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">,</span> defStyleRes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">,</span> defStyleRes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleRes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TypedArray typedArray <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">obtainStyledAttributes</span><span class="token punctuation">(</span>attrs<span class="token punctuation">,</span> attrsDefine<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">,</span> defStyleRes<span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"attr1 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"attr2 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"attr3 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"attr4 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"attr5 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"attr6 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"attr7 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        typedArray<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>log也没问题。但不建议这么做，styleable 帮我们封装了很多操作我们没必要自己搞的这么麻烦。</p><pre><code>2021-01-22 18:24:11.398 23183-23183/com.example.customviewattrs E/MyView: attr1 - &gt;布局中2021-01-22 18:24:11.398 23183-23183/com.example.customviewattrs E/MyView: attr2 - &gt;布局中2021-01-22 18:24:11.398 23183-23183/com.example.customviewattrs E/MyView: attr3 - &gt;布局中2021-01-22 18:24:11.398 23183-23183/com.example.customviewattrs E/MyView: attr4 - &gt;布局中2021-01-22 18:24:11.398 23183-23183/com.example.customviewattrs E/MyView: attr5 - &gt;布局中2021-01-22 18:24:11.398 23183-23183/com.example.customviewattrs E/MyView: attr6 - &gt;布局中2021-01-22 18:24:11.398 23183-23183/com.example.customviewattrs E/MyView: attr7 - &gt;布局中</code></pre><p>2.系统中已有的属性我能直接使用，比如android:text ,为啥我用的时候获取不成功。或者两个自定义view的属性想同崩溃。</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.example.customviewattrs.MyView</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/next<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>attr1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>布局中<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>attr2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>布局中<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>attr3</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>布局中<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>attr4</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>布局中<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>attr5</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>布局中<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>attr6</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>布局中<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>attr7</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>布局中<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>declare-styleable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyView<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attr1<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attr2<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attr3<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attr4<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attr5<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attr6<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attr7<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>declare-styleable</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><p>此时我们在java代码中获取text属性的值是空的。</p><pre class=" language-java"><code class="language-java">  Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"text - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>log</p><pre><code>2021-01-22 20:31:20.813 6511-6511/com.example.customviewattrs E/MyView: text - &gt;null</code></pre><p>其原因是我们在重新定义的text属性所属的命名空间和之前的android:不是同一个。两种解决办法：<br>1.布局中<br>    android:text=”@string/next”<br>改成命名空间<br>    app:text=”@string/next”<br>2.或者在attrs处定义加上android的命名空间，<br><attr name="android:text"> //去掉formate 因为系统定义过了<br>并且获取该属性方式按照如下方式获取android命名空间属性。<br>     Log.e(TAG,”text - &gt;” + typedArray.getString(R.styleable.MyView_android_text));</attr></p><h3 id="浅析AttributeSet-和-TypedArray"><a href="#浅析AttributeSet-和-TypedArray" class="headerlink" title="浅析AttributeSet 和 TypedArray"></a>浅析AttributeSet 和 TypedArray</h3><p>字面上理解AttributSet 是个包含参数的集合，那么通过看他的方法就知道如何获取其内容了。</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">int</span> attributeCount <span class="token operator">=</span> attrs<span class="token punctuation">.</span><span class="token function">getAttributeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> attributeCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String attributeName <span class="token operator">=</span> attrs<span class="token punctuation">.</span><span class="token function">getAttributeName</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            String attributeValue <span class="token operator">=</span> attrs<span class="token punctuation">.</span><span class="token function">getAttributeValue</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span>attributeName <span class="token operator">+</span><span class="token string">" - - >"</span> <span class="token operator">+</span> attributeValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><pre><code>2021-01-25 11:18:06.555 24607-24607/com.example.customviewattrs E/MyView: layout_width - - &gt;-22021-01-25 11:18:06.555 24607-24607/com.example.customviewattrs E/MyView: layout_height - - &gt;-22021-01-25 11:18:06.555 24607-24607/com.example.customviewattrs E/MyView: text - - &gt;@21317550932021-01-25 11:18:06.555 24607-24607/com.example.customviewattrs E/MyView: attr1 - - &gt;布局中2021-01-25 11:18:06.555 24607-24607/com.example.customviewattrs E/MyView: attr2 - - &gt;布局中2021-01-25 11:18:06.555 24607-24607/com.example.customviewattrs E/MyView: attr3 - - &gt;布局中2021-01-25 11:18:06.555 24607-24607/com.example.customviewattrs E/MyView: attr4 - - &gt;布局中2021-01-25 11:18:06.555 24607-24607/com.example.customviewattrs E/MyView: attr5 - - &gt;布局中2021-01-25 11:18:06.555 24607-24607/com.example.customviewattrs E/MyView: attr6 - - &gt;布局中2021-01-25 11:18:06.555 24607-24607/com.example.customviewattrs E/MyView: attr7 - - &gt;布局中</code></pre><p>我们看到布局中所有的属性都在attrs中，并且text所对应的资源变成了@2131755093；由此我们可以得到两个结论：<strong>1、布局中所有属性都会被inflate到attrs这个集合中，所以平时开发中有些历史遗留的无用属性该删就删了吧，还是有性能和内存的占用的影响的。2、attrs集合中的资源内容不能通过直接获取value得到，此时typedArray就派上用场了。</strong><br>ok,那现在typedArray的用处就是简化我们的操作的，我们要获取@2131755093资源所对应的具体值，肯定要经过很多步骤才能达到，typedArray封装了所有操作。</p><h2 id="关于style"><a href="#关于style" class="headerlink" title="关于style"></a>关于style</h2><p>接下来我们探索关于style的七七八八。<br>最初我们了解style一定是在不居中使用，若干有相同的属性组件，把有共性属性的属性放在一起组成一个style属性集合，以达到复用的目的，比如：<br>style.xml中增加myViewStyle</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myViewStyle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        &lt;item name=<span class="token string">"attr1"</span>>style<span class="token number">.</span>xml 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"attr2"</span>>style<span class="token number">.</span>xml 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"attr3"</span>>style<span class="token number">.</span>xml 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"attr4"</span>>style<span class="token number">.</span>xml 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"attr5"</span>>style<span class="token number">.</span>xml 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"attr6"</span>>style<span class="token number">.</span>xml 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"attr7"</span>>style<span class="token number">.</span>xml 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"android:text"</span>>style<span class="token number">.</span>xml 中设置的属性&lt;/item>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><p>在布局中设置，并且把attr1，attr2 attr3的属性去掉</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.example.customviewattrs.MyView</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintLeft_toLeftOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name">        <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">@style/myViewStyle</span><span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/next<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>attr4</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>布局中<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>attr5</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>布局中<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>attr6</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>布局中<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>attr7</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>布局中<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>我们在代码中保持用typedArray获取属性值：</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleRes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TypedArray typedArray <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">obtainStyledAttributes</span><span class="token punctuation">(</span>attrs<span class="token punctuation">,</span> R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">,</span> defStyleRes<span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"attr1 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_attr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"attr2 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_attr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"attr3 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_attr3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"attr4 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_attr4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"attr5 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_attr5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"attr6 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_attr6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"attr7 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_attr7<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"text - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_android_text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        typedArray<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>log:</p><pre><code>2021-01-25 11:54:05.321 4828-4828/com.example.customviewattrs E/MyView: attr1 - &gt;style.xml 中设置的属性2021-01-25 11:54:05.321 4828-4828/com.example.customviewattrs E/MyView: attr2 - &gt;style.xml 中设置的属性2021-01-25 11:54:05.321 4828-4828/com.example.customviewattrs E/MyView: attr3 - &gt;style.xml 中设置的属性2021-01-25 11:54:05.321 4828-4828/com.example.customviewattrs E/MyView: attr4 - &gt;布局中2021-01-25 11:54:05.321 4828-4828/com.example.customviewattrs E/MyView: attr5 - &gt;布局中2021-01-25 11:54:05.321 4828-4828/com.example.customviewattrs E/MyView: attr6 - &gt;布局中2021-01-25 11:54:05.321 4828-4828/com.example.customviewattrs E/MyView: attr7 - &gt;布局中2021-01-25 11:54:05.321 4828-4828/com.example.customviewattrs E/MyView: text - &gt;Next</code></pre><p>我们看到布局设置的属性会覆盖掉style.xml中设置的，即最近原则。我们继续再theme中设置相关属性。<br>themes.xml</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Theme.Customviewattrs<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Theme.MaterialComponents.DayNight.DarkActionBar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Primary brand color. --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colorPrimary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@color/purple_500<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colorPrimaryVariant<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@color/purple_700<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colorOnPrimary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@color/white<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Secondary brand color. --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colorSecondary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@color/teal_200<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colorSecondaryVariant<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@color/teal_700<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colorOnSecondary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@color/black<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Status bar color. --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android:statusBarColor<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">tools:</span>targetApi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>l<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>?attr/colorPrimaryVariant<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Customize your theme here. --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attr1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>theme 中 设置属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attr2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>theme 中 设置属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attr3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>theme 中 设置属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>同时去掉style.xml中attr2 attr3</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>resources<span class="token operator">></span>    <span class="token operator">&lt;</span>style name<span class="token operator">=</span><span class="token string">"myViewStyle"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>item name<span class="token operator">=</span><span class="token string">"attr1"</span><span class="token operator">></span>style<span class="token punctuation">.</span>xml 中设置的属性<span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>        <span class="token operator">&lt;</span>item name<span class="token operator">=</span><span class="token string">"attr4"</span><span class="token operator">></span>style<span class="token punctuation">.</span>xml 中设置的属性<span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>        <span class="token operator">&lt;</span>item name<span class="token operator">=</span><span class="token string">"attr5"</span><span class="token operator">></span>style<span class="token punctuation">.</span>xml 中设置的属性<span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>        <span class="token operator">&lt;</span>item name<span class="token operator">=</span><span class="token string">"attr6"</span><span class="token operator">></span>style<span class="token punctuation">.</span>xml 中设置的属性<span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>        <span class="token operator">&lt;</span>item name<span class="token operator">=</span><span class="token string">"attr7"</span><span class="token operator">></span>style<span class="token punctuation">.</span>xml 中设置的属性<span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>        <span class="token operator">&lt;</span>item name<span class="token operator">=</span><span class="token string">"android:text"</span><span class="token operator">></span>style<span class="token punctuation">.</span>xml 中设置的属性<span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>resources<span class="token operator">></span></code></pre><p>继续打log</p><pre><code>2021-01-25 11:58:44.681 5628-5628/com.example.customviewattrs E/MyView: attr1 - &gt;style.xml 中设置的属性2021-01-25 11:58:44.681 5628-5628/com.example.customviewattrs E/MyView: attr2 - &gt;theme 中 设置属性2021-01-25 11:58:44.681 5628-5628/com.example.customviewattrs E/MyView: attr3 - &gt;theme 中 设置属性2021-01-25 11:58:44.681 5628-5628/com.example.customviewattrs E/MyView: attr4 - &gt;布局中2021-01-25 11:58:44.681 5628-5628/com.example.customviewattrs E/MyView: attr5 - &gt;布局中2021-01-25 11:58:44.681 5628-5628/com.example.customviewattrs E/MyView: attr6 - &gt;布局中2021-01-25 11:58:44.681 5628-5628/com.example.customviewattrs E/MyView: attr7 - &gt;布局中2021-01-25 11:58:44.681 5628-5628/com.example.customviewattrs E/MyView: text - &gt;Next</code></pre><p>同理我们看到遵循就近原则，即theme中的同属性被style中覆盖，style中的同属性被布局中的属性覆盖。</p><h2 id="关于自定义view的构造器中的defStyleAttr-和defStyleRes"><a href="#关于自定义view的构造器中的defStyleAttr-和defStyleRes" class="headerlink" title="关于自定义view的构造器中的defStyleAttr 和defStyleRes"></a>关于自定义view的构造器中的defStyleAttr 和defStyleRes</h2><p>饶了一大圈回到自定义view本身，我们先看源码中对四个参数的解释就能明白大半了。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * Perform inflation from XML and apply a class-specific base style from a     * theme attribute or style resource. This constructor of View allows     * subclasses to use their own base style when they are inflating.     * &lt;p>     * When determining the final value of a particular attribute, there are     * four inputs that come into play:     * &lt;ol>     * &lt;li>Any attribute values in the given AttributeSet.     * &lt;li>The style resource specified in the AttributeSet (named "style").     * &lt;li>The default style specified by &lt;var>defStyleAttr&lt;/var>.     * &lt;li>The default style specified by &lt;var>defStyleRes&lt;/var>.     * &lt;li>The base values in this theme.     * &lt;/ol>     * &lt;p>     * Each of these inputs is considered in-order, with the first listed taking     * precedence over the following ones. In other words, if in the     * AttributeSet you have supplied &lt;code>&amp;lt;Button * textColor="#ff000000"&amp;gt;&lt;/code>     * , then the button's text will &lt;em>always&lt;/em> be black, regardless of     * what is specified in any of the styles.     *     * @param context The Context the view is running in, through which it can     *        access the current theme, resources, etc.     * @param attrs The attributes of the XML tag that is inflating the view.     * @param defStyleAttr An attribute in the current theme that contains a     *        reference to a style resource that supplies default values for     *        the view. Can be 0 to not look for defaults.     * @param defStyleRes A resource identifier of a style resource that     *        supplies default values for the view, used only if     *        defStyleAttr is 0 or can not be found in the theme. Can be 0     *        to not look for defaults.     * @see #View(Context, AttributeSet, int)     */</span>    <span class="token keyword">public</span> <span class="token function">View</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleRes<span class="token punctuation">)</span></code></pre><p>前两个参数不再赘述，</p><h3 id="defStyleAttr"><a href="#defStyleAttr" class="headerlink" title="defStyleAttr"></a>defStyleAttr</h3><p>defStyleAttr  ： An attribute in the current theme that contains a reference to a style resource that supplies default values for the view. Can be 0 to not look for defaults.<br>大意是，在当前theme中的的一个引用的属性，指向一个style资源，style中包含该view的若干默认属性的值。此值可以是0来忽略此参数的效果。其实就是有现实的例子的，TextView中的属性：textAppearance<br>源码中textAppearace的定义就是这个意思</p><pre class=" language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!-- Default appearance of text: color, typeface, size, and style. --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>textAppearance<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reference<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>我们实测一下：<br>attrs.xml中添加属性</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>declare-styleable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyView<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attr1<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attr2<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attr3<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attr4<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attr5<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attr6<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attr7<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android:text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>declare-styleable</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--   定义单独的属性  format 是reference--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defStyleAttr<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reference<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><p>style.xml添加默认style :mydefStyle</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myViewStyle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        &lt;item name=<span class="token string">"attr1"</span>>style<span class="token number">.</span>xml 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"attr4"</span>>style<span class="token number">.</span>xml 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"attr5"</span>>style<span class="token number">.</span>xml 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"attr6"</span>>style<span class="token number">.</span>xml 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"attr7"</span>>style<span class="token number">.</span>xml 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"android:text"</span>>style<span class="token number">.</span>xml 中设置的属性&lt;/item>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mydefStyle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        &lt;item name=<span class="token string">"attr1"</span>>style<span class="token number">.</span>xml mydefStyle  中设置的属性&lt;/item>        &lt;item name=<span class="token string">"attr4"</span>>style<span class="token number">.</span>xml mydefStyle 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"attr5"</span>>style<span class="token number">.</span>xml mydefStyle 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"attr6"</span>>style<span class="token number">.</span>xml mydefStyle 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"attr7"</span>>style<span class="token number">.</span>xml mydefStyle 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"android:text"</span>>style<span class="token number">.</span>xml mydefStyle 中设置的属性&lt;/item>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><p>theme中添加该属性配置</p><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Theme.Customviewattrs<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Theme.MaterialComponents.DayNight.DarkActionBar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Primary brand color. --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colorPrimary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@color/purple_500<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colorPrimaryVariant<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@color/purple_700<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colorOnPrimary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@color/white<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Secondary brand color. --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colorSecondary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@color/teal_200<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colorSecondaryVariant<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@color/teal_700<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colorOnSecondary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@color/black<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Status bar color. --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android:statusBarColor<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">tools:</span>targetApi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>l<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>?attr/colorPrimaryVariant<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Customize your theme here. --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attr1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>theme 中 设置属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attr2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>theme 中 设置属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attr3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>theme 中 设置属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defStyleAttr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@style/mydefStyle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>代码中把新加的属性配置加入代码中如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyView</span> <span class="token keyword">extends</span> <span class="token class-name">View</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span>  <span class="token keyword">static</span> String TAG <span class="token operator">=</span> <span class="token string">"MyView"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>attrs<span class="token punctuation">,</span>R<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>defStyleAttr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">///这里传入</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>attrs<span class="token punctuation">,</span>defStyleAttr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleRes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">,</span> defStyleRes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">,</span> defStyleRes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleRes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TypedArray typedArray <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">obtainStyledAttributes</span><span class="token punctuation">(</span>attrs<span class="token punctuation">,</span> R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">,</span> defStyleRes<span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"attr1 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_attr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"attr2 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_attr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"attr3 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_attr3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"attr4 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_attr4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"attr5 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_attr5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"attr6 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_attr6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"attr7 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_attr7<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"text - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_android_text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        typedArray<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行看log,一个也没见默认配置</p><pre><code>2021-01-25 13:09:16.871 25622-25622/com.example.customviewattrs E/MyView: attr1 - &gt;style.xml 中设置的属性2021-01-25 13:09:16.871 25622-25622/com.example.customviewattrs E/MyView: attr2 - &gt;theme 中 设置属性2021-01-25 13:09:16.871 25622-25622/com.example.customviewattrs E/MyView: attr3 - &gt;theme 中 设置属性2021-01-25 13:09:16.871 25622-25622/com.example.customviewattrs E/MyView: attr4 - &gt;布局中2021-01-25 13:09:16.871 25622-25622/com.example.customviewattrs E/MyView: attr5 - &gt;布局中2021-01-25 13:09:16.871 25622-25622/com.example.customviewattrs E/MyView: attr6 - &gt;布局中2021-01-25 13:09:16.872 25622-25622/com.example.customviewattrs E/MyView: attr7 - &gt;布局中2021-01-25 13:09:16.872 25622-25622/com.example.customviewattrs E/MyView: text - &gt;Next所以去掉除了mydefStyle处配置的attr1之外所有attr1配置：log2021-01-25 13:16:01.241 26237-26237/com.example.customviewattrs E/MyView: attr1 - &gt;style.xml mydefStyle 中设置的属性2021-01-25 13:16:01.241 26237-26237/com.example.customviewattrs E/MyView: attr2 - &gt;theme 中 设置属性2021-01-25 13:16:01.241 26237-26237/com.example.customviewattrs E/MyView: attr3 - &gt;theme 中 设置属性2021-01-25 13:16:01.241 26237-26237/com.example.customviewattrs E/MyView: attr4 - &gt;布局中2021-01-25 13:16:01.241 26237-26237/com.example.customviewattrs E/MyView: attr5 - &gt;布局中2021-01-25 13:16:01.241 26237-26237/com.example.customviewattrs E/MyView: attr6 - &gt;布局中2021-01-25 13:16:01.242 26237-26237/com.example.customviewattrs E/MyView: attr7 - &gt;布局中2021-01-25 13:16:01.242 26237-26237/com.example.customviewattrs E/MyView: text - &gt;Next</code></pre><p>我们看到如果所有地方都没有配置的属性，系统就会到配置的defStyleAttr属性中去获取，至此defStyleAttr的作用很清楚了，而且他用在主题中配置，并且优先级最低，这就是我在布局中这几写个textview会有默认属性的原因了。</p><h3 id="defStyleRes"><a href="#defStyleRes" class="headerlink" title="defStyleRes"></a>defStyleRes</h3><p>至于这个参数其实就是在theme中未指定style属性时，可以动态指定默认的style。我们新建一个style：mydefStyleNew</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myViewStyle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        &lt;item name=<span class="token string">"attr3"</span>>style<span class="token number">.</span>xml 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"attr4"</span>>style<span class="token number">.</span>xml 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"attr5"</span>>style<span class="token number">.</span>xml 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"attr6"</span>>style<span class="token number">.</span>xml 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"attr7"</span>>style<span class="token number">.</span>xml 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"android:text"</span>>style<span class="token number">.</span>xml 中设置的属性&lt;/item>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mydefStyle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        &lt;item name=<span class="token string">"attr1"</span>>style<span class="token number">.</span>xml mydefStyle  中设置的属性&lt;/item>        &lt;item name=<span class="token string">"attr4"</span>>style<span class="token number">.</span>xml mydefStyle 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"attr5"</span>>style<span class="token number">.</span>xml mydefStyle 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"attr6"</span>>style<span class="token number">.</span>xml mydefStyle 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"attr7"</span>>style<span class="token number">.</span>xml mydefStyle 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"android:text"</span>>style<span class="token number">.</span>xml mydefStyle 中设置的属性&lt;/item>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mydefStyleNew<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        &lt;item name=<span class="token string">"attr1"</span>>style<span class="token number">.</span>xml mydefStyleNew  中设置的属性&lt;/item>        &lt;item name=<span class="token string">"attr2"</span>>style<span class="token number">.</span>xml mydefStyleNew  中设置的属性&lt;/item>        &lt;item name=<span class="token string">"attr3"</span>>style<span class="token number">.</span>xml mydefStyleNew  中设置的属性&lt;/item>        &lt;item name=<span class="token string">"attr4"</span>>style<span class="token number">.</span>xml mydefStyleNew 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"attr5"</span>>style<span class="token number">.</span>xml mydefStyleNew 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"attr6"</span>>style<span class="token number">.</span>xml mydefStyleNew 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"attr7"</span>>style<span class="token number">.</span>xml mydefStyleNew 中设置的属性&lt;/item>        &lt;item name=<span class="token string">"android:text"</span>>style<span class="token number">.</span>xml mydefStyleNew 中设置的属性&lt;/item>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><p>在代码中设置：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyView</span> <span class="token keyword">extends</span> <span class="token class-name">View</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span>  <span class="token keyword">static</span> String TAG <span class="token operator">=</span> <span class="token string">"MyView"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>attrs<span class="token punctuation">,</span>R<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>defStyleAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>attrs<span class="token punctuation">,</span>defStyleAttr<span class="token punctuation">,</span>R<span class="token punctuation">.</span>style<span class="token punctuation">.</span>mydefStyleNew<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里设置</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleRes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">,</span> defStyleRes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">,</span> defStyleRes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleRes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TypedArray typedArray <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">obtainStyledAttributes</span><span class="token punctuation">(</span>attrs<span class="token punctuation">,</span> R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">,</span> defStyleRes<span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"attr1 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_attr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"attr2 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_attr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"attr3 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_attr3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"attr4 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_attr4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"attr5 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_attr5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"attr6 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_attr6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"attr7 - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_attr7<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"text - >"</span> <span class="token operator">+</span> typedArray<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>MyView_android_text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        typedArray<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>删掉主题中所有的自定义属性：</p><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- Base application theme. --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Theme.Customviewattrs<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Theme.MaterialComponents.DayNight.DarkActionBar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Primary brand color. --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colorPrimary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@color/purple_500<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colorPrimaryVariant<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@color/purple_700<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colorOnPrimary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@color/white<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Secondary brand color. --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colorSecondary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@color/teal_200<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colorSecondaryVariant<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@color/teal_700<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colorOnSecondary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@color/black<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Status bar color. --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android:statusBarColor<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">tools:</span>targetApi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>l<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>?attr/colorPrimaryVariant<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Customize your theme here. --></span><span class="token comment" spellcheck="true">&lt;!--        &lt;item name="attr2">theme 中 设置属性&lt;/item>--></span><span class="token comment" spellcheck="true">&lt;!--        &lt;item name="attr3">theme 中 设置属性&lt;/item>--></span><span class="token comment" spellcheck="true">&lt;!--        &lt;item name="defStyleAttr">@style/mydefStyle&lt;/item>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>log</p><pre><code>2021-01-25 14:08:06.826 8515-8515/com.example.customviewattrs E/MyView: attr1 - &gt;style.xml mydefStyleNew 中设置的属性2021-01-25 14:08:06.826 8515-8515/com.example.customviewattrs E/MyView: attr2 - &gt;style.xml mydefStyleNew 中设置的属性2021-01-25 14:08:06.826 8515-8515/com.example.customviewattrs E/MyView: attr3 - &gt;style.xml 中设置的属性2021-01-25 14:08:06.826 8515-8515/com.example.customviewattrs E/MyView: attr4 - &gt;布局中2021-01-25 14:08:06.826 8515-8515/com.example.customviewattrs E/MyView: attr5 - &gt;布局中2021-01-25 14:08:06.826 8515-8515/com.example.customviewattrs E/MyView: attr6 - &gt;布局中2021-01-25 14:08:06.826 8515-8515/com.example.customviewattrs E/MyView: attr7 - &gt;布局中2021-01-25 14:08:06.826 8515-8515/com.example.customviewattrs E/MyView: text - &gt;Next</code></pre><p>再打开主题中的刚才注释掉的代码：<br>log</p><pre><code>2021-01-25 14:09:46.809 10858-10858/com.example.customviewattrs E/MyView: attr1 - &gt;style.xml mydefStyle 中设置的属性2021-01-25 14:09:46.810 10858-10858/com.example.customviewattrs E/MyView: attr2 - &gt;theme 中 设置属性2021-01-25 14:09:46.810 10858-10858/com.example.customviewattrs E/MyView: attr3 - &gt;style.xml 中设置的属性2021-01-25 14:09:46.810 10858-10858/com.example.customviewattrs E/MyView: attr4 - &gt;布局中2021-01-25 14:09:46.810 10858-10858/com.example.customviewattrs E/MyView: attr5 - &gt;布局中2021-01-25 14:09:46.810 10858-10858/com.example.customviewattrs E/MyView: attr6 - &gt;布局中2021-01-25 14:09:46.810 10858-10858/com.example.customviewattrs E/MyView: attr7 - &gt;布局中2021-01-25 14:09:46.810 10858-10858/com.example.customviewattrs E/MyView: text - &gt;Next</code></pre><p><strong>发现mydefStyleNew中配置的属性值都未显示。综上我们可以得出view的属性通过配置设置的几种方法：<br>1.在布局xml中直接配置<br>2.在声明style，并在布局中配置其style属性。<br>3.在theme中设置其属性。<br>4.通过自定义style属性，在theme中配置属性对应style声明。<br>5.通过defStyleRes ，不需要任何额外配置自定义view自带默认的属性集合。<br>一般情况下其优先级：（1）&gt; (2) &gt; (4) &gt; (3) &gt;（5）.</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上探索，我们在封装ui组件库的时候可以通过主题来配置应用的视觉属性，同样谷歌官方的实践也是如此，达到通过少量配置来整体切换app风格的高效工程。所以在未来的ui换肤和平台化过程中可以考虑此特性。</p>]]></content>
      
      
      <categories>
          
          <category> android UI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UI </tag>
            
            <tag> 原创 </tag>
            
            <tag> 自定义view </tag>
            
            <tag> 主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YUV颜色空间之彩色电视制</title>
      <link href="YUV%E9%A2%9C%E8%89%B2%E7%A9%BA%E9%97%B4%E4%B9%8B%E5%BD%A9%E8%89%B2%E7%94%B5%E8%A7%86%E5%88%B6.html"/>
      <url>YUV%E9%A2%9C%E8%89%B2%E7%A9%BA%E9%97%B4%E4%B9%8B%E5%BD%A9%E8%89%B2%E7%94%B5%E8%A7%86%E5%88%B6.html</url>
      
        <content type="html"><![CDATA[<p>继续这篇文章之前，先确保上篇没有不懂的内容。上篇讲了彩色电视到数字电视的发展，进而更深层次的，讲了模拟电视信号，和数字电视信号。其实收音机的信号传输方式，也是这么个发展。</p><p>但是光知道模拟信号和数字信号，依然不够，因为它只是电视传输图像数据，使用的方式。而具体到更细节的东西，比如图像的扫描参数、电视信号的带宽，以及射频特性，就需要制定一套标准，来进行统一。而这就是这篇要讲的，电视制。</p><h5 id="1-电视制是啥？"><a href="#1-电视制是啥？" class="headerlink" title="1. 电视制是啥？"></a>1. 电视制是啥？</h5><p>简单来说，它就是传输图像和声音的方法。像前面说的，电视制按扫描参数、电视信号带宽和射频特性，来划分。就比如说，扫描参数包括了扫描方式（在显示器里说的，隔行扫描或逐行扫描）、扫描行频（一秒扫描多少行）、帧频（一秒扫多少帧），再加上信号带宽，声音的载波频率（不用管），信号的调制方法（不用管），还有比较重要的，使用的颜色空间，等等这些，就构成了电视制。</p><p>看到电视制包含了这么多参数，就知道世界上的电视制也不只一种。就黑白电视来讲，世界上在用和不在用的，就有大约14种。而值得庆幸的是，彩色电视制，在黑白电视制基础上，按其在处理三种基色信号的不同方式，进一步进行了划分。目前世界上，主要使用的彩色电视制有三种。</p><h5 id="2-彩色电视制"><a href="#2-彩色电视制" class="headerlink" title="2. 彩色电视制"></a>2. 彩色电视制</h5><p>黑白电视制就不说了，直接来到彩色电视制。世界上现行的模拟彩色电视制主要有三种，分别为：NTSC、PAL、和SECAM，它们互不兼容。</p><h5 id="2-1-NTSC"><a href="#2-1-NTSC" class="headerlink" title="2.1 NTSC"></a>2.1 NTSC</h5><p>NTSC制是比较早制定的彩色电视广播标准，在美国、加拿大等大部分西半球国家，以及日本、韩国、菲律宾和台湾地区采用这种制式。</p><p>它的主要特性是，使用的YIQ信号，也就是YIQ颜色空间，并不是YUV，色度信号使用正交幅度调制（QAM，知道就好）。</p><p>它的扫描参数会在下面列在表格里，下同。</p><h5 id="2-2-PAL"><a href="#2-2-PAL" class="headerlink" title="2.2 PAL"></a>2.2 PAL</h5><p>PAL彩色电视制是在NTSC之后，开播的彩色电视广播标准。PAL制称为逐行倒相（Phase-Alternative Line， PAL）彩色电视制，使用的也是正交幅度调制。它是为了克服NTSC制存在的相位敏感，而造成的彩色失真而开发的。恩，知道就好。</p><p>它的使用范围为：德国、英国等一些西欧国家，以及中国、朝鲜等国家采用这种制式。而在这种制式下，更细节的一些参数也不太相同，因此PAL制有PAL-G，PAL-I，PAL-D等制式，我国大陆（注意是大陆，不包括台湾）使用的是PAL-D。</p><p>它使用的颜色空间是YUV。</p><h5 id="2-3-SECAM制"><a href="#2-3-SECAM制" class="headerlink" title="2.3 SECAM制"></a>2.3 SECAM制</h5><p>SECAM制不同于NTSC和PAL，它由法国提出并制定，SECAM是法文的缩写。它广泛应用在法国、俄罗斯、东欧、中东等约60多个地区和国家。</p><p>和NTSC和PAL不同的是，它的色度信号，使用的不是正交幅度调制，而是频率调制（FM）。它使用的颜色空间也是一种新的颜色空间，和YUV类似。</p><h5 id="3-电视制的兼容性"><a href="#3-电视制的兼容性" class="headerlink" title="3. 电视制的兼容性"></a>3. 电视制的兼容性</h5><p>NTSC、PAL、SECAM互不兼容，意思就是，PAL制的电视机不能观看NTSC和SECAM制的电视节目，同理NTSC和SECAM也一样。</p><p>虽然它们之间互不兼容，但是它们却都是彩色和黑白兼容的制式。意思是：</p><p>一：黑白电视机能够接收彩色电视广播，显示的是黑白图像。</p><p>二：彩色电视机能够接收黑白电视广播，显示的也是黑白图像。</p><p>而为了实现这种兼容性，对彩色电视系统有两点要求：</p><p>一：必须采用和黑白电视相同的一些基本参数，比如扫描方式、行频、帧频、图像载波、声音载频等。</p><p>二：需要将摄像机采集图像，输出的三基色RGB信号，转换成一个亮度信号，以及代表色度的两个色差信号（NTSC、PAL、SECAM使用的颜色空间都是如此，如YIQ、YUV，Y为亮度，IQ和UV分别为色差，等之后介绍YUV的时候会进一步明白），并将它们组合成一个彩色全电视信号进行传送。</p><p>然后在接收端的时候，彩色电视机将彩色全电视信号，重新转换成三个基色信号，在显示器上重现发送端的彩色图像。</p><p>流程图如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-8c758dbfd5f845d8?imageMogr2/auto-orient/strip%7CimageView2/2/w/1182" alt="img"></p><p>电视显示系统</p><p>图中Y表示亮度信号，C1和C2表示两个色差信号，在实际应用中，C1、C2与具体的应用有关。比如如果图中电视机为NTSC彩色电视机，则C1和C2分别表示I、Q两个色差信号，如果是PAL彩色电视机，则C1、C2分别表示U和V。而在后面要讲的ITU-R BT.601里，C1和C2分别表示Cr、Cb两个色差信号。</p><p>这里说的色差，就是三基色（即R、G、B）与亮度（Y）的差。</p><h5 id="4-国际彩色电视标准"><a href="#4-国际彩色电视标准" class="headerlink" title="4. 国际彩色电视标准"></a>4. 国际彩色电视标准</h5><p>因为电视制不少，国际电信联盟（ITU，记住这个词，后面还会用），给每一种黑白电视制分配了A~N的字母标识，这样黑白电视制的字母与NTSC、PAL和SECAM彩色电视制结合，就制定了世界上所有的电视制。如我国大陆的PAL-D，美国的NTSC-M。如下表（连带各制式的扫描参数）：</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-6724ad67769c4344?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200" alt="img"></p><p>国际彩色电视标准</p><p>表中的场频很好理解，前面说过电视机的扫描方式分为：隔行扫描和逐行扫描。如果是隔行扫描的情况下，电子束从第一行开始扫，接着是3、5、7…这样扫完奇数行后，扫偶数行，相当于一帧图像，分成两场扫。第一场扫描总行数的一半，第二场扫描另一半，因而括号内场频是帧频的二倍。</p><p>作者：金架构<br>链接：<a href="https://www.jianshu.com/p/599a61989b4a">https://www.jianshu.com/p/599a61989b4a</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> 音视频基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> h264 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CIE颜色空间四之从CIExyY到CIEYUV</title>
      <link href="CIE%E9%A2%9C%E8%89%B2%E7%A9%BA%E9%97%B4%E5%9B%9B%E4%B9%8B%E4%BB%8ECIExyY%E5%88%B0CIEYUV.html"/>
      <url>CIE%E9%A2%9C%E8%89%B2%E7%A9%BA%E9%97%B4%E5%9B%9B%E4%B9%8B%E4%BB%8ECIExyY%E5%88%B0CIEYUV.html</url>
      
        <content type="html"><![CDATA[<p>接着上篇的CIE xyY颜色空间继续，上篇中我们分析了下xyY中的xyY三个值是怎么来的，并且引进了它的二维色度图。那么接下来，我们就对它的色度图，分析一下</p><p>上篇中我们说过，色度是色调和饱和度的统称，所以xyY的色度图，并没有展现亮度Y，因而它只有xy两个坐标轴</p><h5 id="1-CIE-xyY色度图中看色调和饱和度"><a href="#1-CIE-xyY色度图中看色调和饱和度" class="headerlink" title="1. CIE xyY色度图中看色调和饱和度"></a>1. CIE xyY色度图中看色调和饱和度</h5><p>直观的来看，如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-9dd43feb8ec2ca8b.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/674" alt="img"></p><p>CIE xyY色度图</p><h5 id="1-1-饱和度"><a href="#1-1-饱和度" class="headerlink" title="1.1 饱和度"></a>1.1 饱和度</h5><p>图中W点为白光E的坐标，饱和度为0，谱色轨迹上饱和度为100%。在图中对饱和度相同的各点，进行连线，形成一圈一圈的舌形线，称为等饱和度线。</p><h5 id="1-2-色调"><a href="#1-2-色调" class="headerlink" title="1.2 色调"></a>1.2 色调</h5><p>W点向谱色轨迹上各点连线，形成的发散线段，叫做等色调波长线。线段上任何一点的波长，与谱色轨迹上的单色波长相同。比如图中M点的波长为540nm，那么WM线上个彩色点的波长都为540nm。</p><p>这两句应该比较好理解，那么通过控制变量，在等色调波长线上，看饱和度是个什么情况呢？</p><p>比如图中的WM线，在M点饱和度为100%，越靠近W点，饱和度越低，也就是渗入的白光越高，到了W点，则完全成为白光。如果这样理解比较费力，可以反向理解，从W点到M点，掺入的单色光越来越多，到M点达到饱和。</p><p>分析一下就可以看出，在xyY色度图上颜色呈现很清晰。</p><h5 id="1-3-色度图上看色域"><a href="#1-3-色度图上看色域" class="headerlink" title="1. 3 色度图上看色域"></a>1. 3 色度图上看色域</h5><h5 id="色域是啥？"><a href="#色域是啥？" class="headerlink" title="色域是啥？"></a>色域是啥？</h5><p>(1)在图中，就是一个闭合曲线所包围的区域。</p><p>(2)在显示设备上，它表示了显示设备可以显示的所有颜色的集合。</p><p>我们先分析(1)，在xyY色度图上，谱色轨迹所包围的区域，就是这个颜色空间所能呈现的色域。通常我们会对这个色域进行划分，这样就比较好判断，某种颜色在坐标系上的范围。如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-502076b614a84dbe.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/758" alt="img"></p><p>xyY颜色空间色域图</p><p>再来看二，这个比较重要，来分析这个之前先来看个问题，为什么显示设备不能显示xyY的整块色域呢？</p><p>原因很简单，因为三基色不同。我们首先要明白，图中xyY形成的整块色域，使用的是CIE规定的标准三基色，分别为700nm(R)，546.1nm(G)，435.8nm(B)，可以对照上图找下，分别为色度图的三角。</p><p>而在显示设备上，我们是使用红、蓝、绿三种荧光粉，发出的非标准谱色光，作为显像的三基色。所以我们的显示设备，能显示的色域只占图中的一部分。</p><p>就拿彩色电视来说，他们能重现的颜色的最大范围如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-767209b99c887582.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/762" alt="img"></p><p>NTSC和PAL电视重现的颜色范围</p><p>细心点可以看到，NTSC和PAL电视显示的色域也不同（NTSC和PAL为电视制式，后面会讲）。那是因为彩色电视的制式不一样，他们采用的三基色荧光粉也不一样。</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-d546a285671ced27.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200" alt="img"></p><p>这张图是NTSC和PAL电视，显像三基色的色度坐标，可以看到他们使用的三基色坐标并不一致。</p><p>而打印机、电影、电视，他们能重现的色域，差别就更大了。</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-c762d58fc81a946f.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/790" alt="img"></p><p>几种设备重现的彩色范围</p><p>图中可以看出，因为电影需要比较生动，细腻的画质，所以它能呈现的彩色范围更大。</p><p>通过以上就可以知道，CIE xyY在色度图上的表现很直观，并且做研究很标准、很方便，但是它依然有缺点</p><h5 id="2-CIE-xyY色度图的缺点"><a href="#2-CIE-xyY色度图的缺点" class="headerlink" title="2. CIE xyY色度图的缺点"></a>2. CIE xyY色度图的缺点</h5><p>我们通过上面几张图，似乎并没有看到缺点。不过有个缺点是我们上篇就说过的，它没有显示亮度。不过这个也无关紧要，重要的是另一个缺点。请看下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-edd6d4cf025500ca.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/712" alt="img"></p><p>这张图代表了CIE xyY色度图的感知均匀性，什么意思呢？我们都知道，人眼对颜色的感知并不是线性的，比如之前说的，人眼感觉绿色就比红和蓝要亮。</p><p>而图中的线段，就代表了人眼对相邻色的鉴别能力。图中每条线段，表示一对颜色，在人眼看来，它们是相同的颜色。在图中可以看出，各个线段的长短并不一致，这就是感知不均匀。线段短的，说明人眼对这片区域的颜色变化更敏感。</p><p>这个缺点看起来对普通人无关紧要，但是对科学家就要命啦，所以他们在CIE xyY的基础上，又做了一层转换。</p><h5 id="3-CIE-YUV颜色空间"><a href="#3-CIE-YUV颜色空间" class="headerlink" title="3. CIE YUV颜色空间"></a>3. CIE YUV颜色空间</h5><p>如上所说，这种颜色空间是在xyY的基础上，经过了一层线性变换得来的。在色度图上，两个点之间的色差与我们对颜色的感知是均匀的。</p><p>而YUV里面的Y，还和XYZ或者xyY中的Y一样，而U和V定义如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-2e1332bc18aa82d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/740" alt="img"></p><p>然后这帮人，为了进一步减小色差与感知的非线性，又开发了CIE YU’V’颜色空间，注意是带撇的。</p><h5 id="4-CIE-YU’V’"><a href="#4-CIE-YU’V’" class="headerlink" title="4. CIE YU’V’"></a>4. CIE YU’V’</h5><p>其中的Y依然不变，u’和v’定义如下图</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-a011a63fb2008c6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1010" alt="img"></p><h5 id="5-CIE颜色空间总结（重要）"><a href="#5-CIE颜色空间总结（重要）" class="headerlink" title="5. CIE颜色空间总结（重要）"></a>5. CIE颜色空间总结（重要）</h5><p>至此，CIE的XYZ、xyY、YUV、YU’V’等颜色空间介绍完毕，还有CIE LUV和CIE LAB打算不讲啦，理由是啥？</p><h5 id="理由："><a href="#理由：" class="headerlink" title="理由："></a>理由：</h5><p>因为这个系列的最终目标，是视频编码和图像处理，而在视频编码里我们使用的YUV，并不是CIE YUV，注意我们常说的<strong>YUV和CIE YUV并不是一回事</strong>，下篇会讲他们为啥不是一回事。</p><p>那为什么又要讲CIE这几个颜色空间呢？因为如果要成为一名专业的音视频开发人员，这些知识必不可少。并且，最重要的，还是在了解这几个颜色空间时，所采取的思路，和分析的方法。</p><p>而且在了解了这几个颜色空间之后，后面的YUV、YCbCr也就很好理解啦。因为从命名上就可以看出，它们差别不大，如果你认真看了这几篇，可以说是小菜一碟，哈哈~</p><p>作者：金架构<br>链接：<a href="https://www.jianshu.com/p/9aafa10a6138">https://www.jianshu.com/p/9aafa10a6138</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> 音视频基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> h264 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CIE颜色空间三之从CIEXYZ到CIExyY</title>
      <link href="CIE%E9%A2%9C%E8%89%B2%E7%A9%BA%E9%97%B4%E4%B8%89%E4%B9%8B%E4%BB%8ECIEXYZ%E5%88%B0CIExyY.html"/>
      <url>CIE%E9%A2%9C%E8%89%B2%E7%A9%BA%E9%97%B4%E4%B8%89%E4%B9%8B%E4%BB%8ECIEXYZ%E5%88%B0CIExyY.html</url>
      
        <content type="html"><![CDATA[<p>在上篇文章中，我们曾大致了解了一下CIE XYZ颜色空间。知道X、Y、Z是R、G、B的线性变换的结果，并知道Y不仅仅包含绿色，并且由于人眼感受绿色，要比红色和蓝色要亮，因此定义Y为亮度。</p><p>发完文章后我仔细看了一下，发现有几个会引起误区的地方。</p><h5 id="1-X、Y、Z和R、G、B的关系"><a href="#1-X、Y、Z和R、G、B的关系" class="headerlink" title="1. X、Y、Z和R、G、B的关系"></a>1. X、Y、Z和R、G、B的关系</h5><p>如果你看完上篇文章，认为X就是R（红）、Y就是G（绿）、Z就是B（红），那是因为，我没有把RGB转换成XYZ的公式进行拆分。有些读者在学校的时候，并没学过线性代数，这也包括我，不过我曾经自学过一段线性代数，所以为了能更清晰的分析CIE XYZ颜色空间，我们还是对下面这个公式分析一下。</p><p>其实这是一个简单的矩阵相乘，只要将等式右侧，第一个矩阵的每行，乘以第二个矩阵的列即可</p><p>原公式：</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-403ef1510c490aae.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/550" alt="img"></p><p>RGB转换为XYZ的公式</p><p>变换后：</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-b806a814cfb9c548.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/549" alt="img"></p><p>这样就可以看到，X、Y、Z其实分别是R、G、B三者的组合，只不过X值将近一半是由R组成，而Y值则多半由G组成，即百分之八十都是绿色，而Z百分之九十九都是蓝色。所以上篇文章分析的把Y定位亮度，并不是Y值就是绿色，而是它包含的绿色信息最多。</p><p>现在应该对XYZ颜色空间比较清楚了吧，不过说到这，还有一个重点没有介绍，就是XYZ颜色空间在坐标系上的表现。因为制定这个颜色空间，一是为了统一颜色表示，二是它方便进行数学计算。</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-bd06685aef333e6c.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/481" alt="img"></p><p>CIE XYZ颜色空间</p><p>这张图表示了从400nm（紫色）到700nm（红色）之间的XYZ三基色刺激值，这是一个曲面向原点连线，形成的锥体，而且所有的XYZ刺激值，都落在这个正XYZ象限的椎体内。</p><p>这里坐标轴原点，相当于没有光照的黑色，而曲线边界代表纯光谱色的三基色刺激值，所以这个边界也称为光谱轨迹。光谱轨迹上的波长是单一的，所以在光谱轨迹上的颜色，代表了该颜色能达到的最大饱和度。</p><h5 id="2-XYZ的配色方程"><a href="#2-XYZ的配色方程" class="headerlink" title="2. XYZ的配色方程"></a>2. XYZ的配色方程</h5><p>在XYZ中，任何一种颜色，都可以用下面这个公式表示：</p><p>C=X<strong>X</strong>+Y<strong>Y</strong>+Z<strong>Z</strong></p><p>在这里，C代表颜色，加粗的X、Y、Z为三个基色单位，而<strong>X</strong>、<strong>Y</strong>、<strong>Z</strong>均为正的基色系数。当X=Y=Z时，合成白光。</p><p>说这个是因为，我们需要知道，合成的颜色的色调和饱和度，是由X、Y、Z的比值确定，这对理解接下来的xyY颜色空间很有帮助。</p><h5 id="3-从XYZ到xyY颜色空间"><a href="#3-从XYZ到xyY颜色空间" class="headerlink" title="3. 从XYZ到xyY颜色空间"></a>3. 从XYZ到xyY颜色空间</h5><p>从上面我们可以看到，XYZ的使用也并不简单，而且在坐标系上，它是一个锥体，也不直观。它虽然把Y定位亮度，但是在上图中并不好展现。所以后来CIE基于XYZ，又做了一层转换。</p><h5 id="3-1-xyY的xy是怎么来的"><a href="#3-1-xyY的xy是怎么来的" class="headerlink" title="3.1 xyY的xy是怎么来的"></a>3.1 xyY的xy是怎么来的</h5><p>直接点来说，它们的关系就是下面这个公式：</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-7887da4dbf72cef0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/441" alt="img"></p><p>XYZ转换为xyY</p><p>这里的小写xyz称为<strong>三基色相对系数</strong></p><p>这个公式要怎么理解呢？上面说了，在XYZ颜色空间里，当XYZ的比值不变时，合成颜色的色调和饱和度不变，也就是色度（色度是色调和饱和度的统称）不变。所以我们可以基于这个，将亮度和色度从概念上分开。既然亮度在坐标系上不太好展现，那我们就不展现。而且在管理颜色的时候，我们最关心的还是色度。</p><p>所以我们可以将X、Y、Z分别比上（X+Y+Z），只考虑它们的相对比例。这样色度将能更直观的描述，而且我们可以规定</p><p>作者：金架构<br>链接：<a href="https://www.jianshu.com/p/854ca5f13ce6">https://www.jianshu.com/p/854ca5f13ce6</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> 音视频基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> h264 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cie颜色空间二之cie XYZ及Y的含义</title>
      <link href="XYZ%E5%8F%8AY%E7%9A%84%E5%90%AB%E4%B9%89.html"/>
      <url>XYZ%E5%8F%8AY%E7%9A%84%E5%90%AB%E4%B9%89.html</url>
      
        <content type="html"><![CDATA[<p>在上篇文章中，我想应该比较清楚的解释了，什么是<strong>色调</strong>、<strong>饱和度</strong>、<strong>明度</strong>（如果还没理解，请再看一遍哈~）。并且在结尾的时候，引入了HSB颜色空间，并在设备相关和设备无关的基础上，分析了一下它和之前一直在说的，也是生活中比较熟悉的，RGB颜色空间的区别。</p><p>那么接下来呢，就开始介绍几个比较重要的颜色空间。比如：<strong>CIE XYZ</strong>、<strong>CIE xyY</strong>、<strong>CIE YUV</strong>、<strong>CIE LUV</strong>、<strong>CIE LAB</strong>， 光看名字就知道，这些颜色空间都是CIE制定的。而且按这个顺序排列，是因为它们之间的递进或者因果关系，就是这样。从XYZ的产生，到YUV，以及后面的LUV、LAB，这是一条线下来的，现在不清楚没关系，接下来，我会理清它们之间的关系，并方便读者形成知识网。</p><p>那之所以引入这几个颜色空间，或者说它们的重要性是啥呢？是因为它们已经是目前成型，并且广泛使用的颜色空间。比如YUV，做视频编码的应该都比较熟悉，它广泛的应用在电视系统、视频编码领域，这也是这个系列，后面要逐步涉猎的内容。</p><h5 id="1-颜色度量方法的发展"><a href="#1-颜色度量方法的发展" class="headerlink" title="1. 颜色度量方法的发展"></a>1. 颜色度量方法的发展</h5><p>为了要清楚的了解这些颜色空间，以及颜色度量方法的来龙去脉，我们还是从源头说起。</p><p>还记得在<a href="https://www.jianshu.com/p/e5e2c013ba02">图像（一）</a>中，我们讲过RGB相加混色和CMY相减混色嘛？CMY不敢说，RGB应该是人人都比较熟悉的颜色空间，通俗点说是常识。那么这个简单的常识，又是怎么来的呢？</p><p>最早的时候，牛顿就开始研究颜色，没错，他不仅提出了牛顿三大定律，并且还著有《光学》一书。在实验的时候，他认识到了每一种颜色，和它相邻颜色之间的关系，比如把红色和紫色首尾相连，就形成了一个色圆，也称牛顿色圆。</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-2b1d78c5614413bf.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/256" alt="img"></p><p>牛顿色圆</p><p>这就是最早的度量颜色的方法。它的圆周表示色调，半径表示饱和度。这为RGB相加混色奠定了基础。</p><p>后来有人提出，人的眼睛有红绿蓝三种基色的接收器，并且经过实验，证实RGB可以产生几乎所有的颜色。至此，颜色的物理学基础打造完毕，而它的度量体系开始慢慢建立。</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-9202897ff0d677a1.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/452" alt="img"></p><p>颜色的度量方法</p><p>现在度量方法的建立中，从颜色到牛顿色圆，应该比较清楚了。图中下面的三个颜色体系，或者说颜色系统，不用多说，中间的CIE制是重点。而Munsell制和Ostwald制，不知道也没关系。只需要知道Munsell制，是其他颜色系统的基础。为什么这么说，因为CIE制定的色调、明度、饱和度，就是在Munsell制的基础上建立的，有兴趣的朋友可以翻阅资料看下。</p><p>好啦，现在开始重点介绍CIE颜色系统，也就是文章开头说的那一系列颜色空间。</p><h5 id="2-从RGB到CIE-XYZ颜色空间"><a href="#2-从RGB到CIE-XYZ颜色空间" class="headerlink" title="2. 从RGB到CIE XYZ颜色空间"></a>2. 从RGB到CIE XYZ颜色空间</h5><p>看过上文都知道，RGB是一种设备相关的颜色空间，每一种设备使用RGB模型时，都有不太相同的定义，比如在显示器和打印机上，就不太一样，因此在使用RGB模型时，这些设备之间关于RGB的定义，并不能通用。</p><p>而且还有一点，就是我们在比较两种颜色时，经常会忽略光照的因素，如果比较两种颜色所处的光照环境不一致，那将毫无意义。</p><p>因此，在这两点的基础上，CIE制定了两条标准。</p><p>（1）定义了XYZ颜色空间，这是一种与RGB相关的想象基色系统，更适用于颜色计算。</p><p>（2）定义了标准光源</p><p>我想第二条应该简单明了。那么第一条又是如何来的呢？或者说，为什么要制定XYZ这样的一套颜色空间。</p><h5 id="2-1-为什么要制定XYZ"><a href="#2-1-为什么要制定XYZ" class="headerlink" title="2.1 为什么要制定XYZ"></a>2.1 为什么要制定XYZ</h5><p>要理解这个，得先看一张图。</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-2d18bb5f48243f3c.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/346" alt="img"></p><p>CIE RGB颜色匹配曲线</p><p>这张图，是CIE拉了一帮实验者，做出的实验结果，这是一个RGB颜色匹配函数。图中的横坐标，表示光谱波长，纵坐标表示用来匹配光谱各色所需要的r、g、b值，这些值是以等能量白光为标准的系数，是观察者们实验结果的平均值。</p><p>可以看到，图中的红线，也就是r值，在438.1nm和546.1nm之间出现了负值。恩，出现负值是啥意思呢，总不至于在这一段，需要减去对应数值的红光吧？！谁都知道，合成颜色不能减去红光，但是我们却可以使用相减混色模型，也就是添加红色的补色。</p><p>可以看出，这是弊端之一，在做数学计算的时候，我们肯定是希望，坐标轴上的值尽量都为正数，对吧？！</p><p>而且还有一点，RGB里面，并没有亮度，因此如果要新制定一个颜色空间，也要加上亮度，才能做成设备无关，并且通用。</p><p>这就是制定XYZ的原因。</p><h5 id="2-2-XYZ中的X、Y、Z都代表了什么"><a href="#2-2-XYZ中的X、Y、Z都代表了什么" class="headerlink" title="2.2 XYZ中的X、Y、Z都代表了什么"></a>2.2 XYZ中的X、Y、Z都代表了什么</h5><p>简单来说，X、Y、Z是对R、G、B的一种线性变换，XYZ也分别代表了RGB三基色刺激值的概念。如果这么说还不够直接，那么还有公式</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-403ef1510c490aae.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/550" alt="img"></p><p>RGB转换为XYZ的公式</p><p>现在明白了吧，XYZ是对RGB做了一层线性变换，变换后的颜色空间，使用X、Y、Z为三基色，并且三个值都用正数去匹配所有颜色。同样，每种颜色都可以表示成X、Y、Z的混合。如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-991482116b767c45.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/609" alt="img"></p><p>CIE XYZ颜色匹配函数</p><p>不过变换后的颜色空间，是一种与设备无关的颜色空间。大家肯定都意外，咦~我搞个系数乘一下，就变成设备无关啦。并不是这么简单，因为XYZ中的Y值，并不仅仅只包含绿色信息这么简单。</p><h5 id="2-3-Y值的含义"><a href="#2-3-Y值的含义" class="headerlink" title="2.3 Y值的含义"></a>2.3 Y值的含义</h5><p>此处Y值的含义非常重要，这也是接下来理解其他颜色空间的关键。</p><p>在维基百科中有这么一段（搜关键词CIE 1931 color space就可以看到，注意看英文版，中文翻译的不全），说人眼在相同光照强度的条件下，感受绿色的光谱，要比红色或者蓝色的要亮。</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-dd3df45d7f447dde.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/531" alt="img"></p><p>意思是啥呢？为了更明白，我们重新对照一下下面这张图看下</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-2d18bb5f48243f3c.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/346" alt="img"></p><p>可以看到，图中绿色刺激值，几乎横跨光谱横坐标。而且蓝色在左边，红色在右边，对照横坐标这意味着什么？说明<strong>绿色是中波，蓝色是短波，红色是长波</strong>，而我们都知道比短波短，或者比长波长的电磁波，我们就看不见啦！所以抛出人眼的特性，这点也侧面说明人眼对绿色更为敏感。</p><h5 id="所以XYZ中的Y代表了什么呢？"><a href="#所以XYZ中的Y代表了什么呢？" class="headerlink" title="所以XYZ中的Y代表了什么呢？"></a>所以XYZ中的Y代表了什么呢？</h5><p>可以看英文解释划横线那句，CIE基于这一事实，<strong>定义Y为亮度</strong>（不说明度是因为明度代表主观感受，而亮度代表物理实际测量的光强，所以通常在颜色空间中使用亮度一词）。所以我们在看资料，或者书籍的时候，都会看到Y为亮度，就是这么来的，但是也别忘了，它在CIE的颜色空间中也包含了绿色信息。</p><p>作者：金架构<br>链接：<a href="https://www.jianshu.com/p/2f222564c3ec">https://www.jianshu.com/p/2f222564c3ec</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> 音视频基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> h264 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CIE颜色空间一之色调、明度和饱和度</title>
      <link href="CIE%E9%A2%9C%E8%89%B2%E7%A9%BA%E9%97%B4%E4%B8%80%E4%B9%8B%E8%89%B2%E8%B0%83%E3%80%81%E6%98%8E%E5%BA%A6%E5%92%8C%E9%A5%B1%E5%92%8C%E5%BA%A6.html"/>
      <url>CIE%E9%A2%9C%E8%89%B2%E7%A9%BA%E9%97%B4%E4%B8%80%E4%B9%8B%E8%89%B2%E8%B0%83%E3%80%81%E6%98%8E%E5%BA%A6%E5%92%8C%E9%A5%B1%E5%92%8C%E5%BA%A6.html</url>
      
        <content type="html"><![CDATA[<p>在写<a href="https://www.jianshu.com/p/e5e2c013ba02">图像</a>的时候我们知道，像素构成了图片。那像素是什么？简单来说，它就是一个颜色点。那颜色怎么表示？或者说怎么度量？我们用眼睛感知到的颜色，又如何用数据表示出来呢？</p><p>接下来的几篇文章，会按照这个思路进行介绍。</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-ac9c6065a11343e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/650" alt="img"></p><h5 id="1-颜色的几个相关术语"><a href="#1-颜色的几个相关术语" class="headerlink" title="1. 颜色的几个相关术语"></a>1. 颜色的几个相关术语</h5><p>在写图像（一）的时候，我们就知道，颜色是我们的视觉系统，对可见光的一种感知结果，感知到的颜色光波的频率决定。</p><p>而感知结果是个特别模糊的词，所以国际照明委员会（CIE，记住这个词，后面会经常出现），对这些感觉做出了定义，用颜色的三个特性，来区分颜色，那就是色调、饱和度和明度。这是颜色固有的，截然不同的三个特性。</p><p>因为制定的颜色的这三个特性，是按照主观感知结果来制定的，所以应该比较好理解。</p><h5 id="1-1-色调"><a href="#1-1-色调" class="headerlink" title="1.1 色调"></a>1.1 色调</h5><p><img src="https://upload-images.jianshu.io/upload_images/4272749-fd6ccbc8c8762b9e.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/665" alt="img"></p><p>色调表示法</p><p>查看上图，色调在颜色圆上用圆周表示，圆周上的颜色具有相同的饱和度和明度。看右图，它是最容易把颜色区分开的属性。它代表了视觉系统，对一个区域呈现的颜色的感觉。可以用红橙黄绿青蓝紫等词来描述。在术语上，把感知到的色调这种感觉，称为色彩。比如浅蓝、深蓝。黑、白、灰表示无色彩。就像我们常说的，没有色彩的人生。</p><h5 id="1-2-饱和度"><a href="#1-2-饱和度" class="headerlink" title="1.2 饱和度"></a>1.2 饱和度</h5><p><img src="https://upload-images.jianshu.io/upload_images/4272749-22bbedb395666cf8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/212" alt="img"></p><p>半径表示法</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-22103ae5d66641c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/212" alt="img"></p><p>示例</p><p>如图所示，沿半径方向的颜色，具有相同的色调和明度，但他们的饱和度不同。饱和度是用来区别颜色明暗的程度，当一种颜色掺入其他光成分越多时，就说该颜色越不饱和。完全饱和的颜色，是指没有掺入白光所呈现的颜色。</p><p>在实例中所示的七种颜色，具有相同的色调和明度，但他们的饱和度不同。左边的饱和度最浅，右边的饱和度最深。</p><h5 id="1-3-明度"><a href="#1-3-明度" class="headerlink" title="1.3 明度"></a>1.3 明度</h5><p><img src="https://upload-images.jianshu.io/upload_images/4272749-47d55ffbc9434fe6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/299" alt="img"></p><p>垂直轴表示法</p><p>明度是视觉系统，对可见物体辐射光或发射光多少的感知属性。比如一支点燃的蜡烛，看起来要比在白炽灯下亮。这个词比较偏重感知，不过可以对比色调和饱和度来理解。色调其实可以理解成我们常说的不同的颜色，而饱和度可以理解成颜色的强度。</p><p>它的值用0-10表示，在右侧七种颜色中，它们具有相同的色调和饱和度，但是明度不同。底部的明度最小，顶部的明度最大。</p><p>因为明度的主观感觉值无法用物理设备测量，所以CIE后来定义了亮度（luminance），它表示单位面积上反射或发射的光的强度，这是一种可度量的表示方法，了解就行。</p><h5 id="1-4-明度和饱和度区分"><a href="#1-4-明度和饱和度区分" class="headerlink" title="1.4 明度和饱和度区分"></a>1.4 明度和饱和度区分</h5><p>评论说，关于颜色的饱和度和明度，看了文章之后还是分辨不清楚。恩，我事后深深的想了下，这点确实非常重要，因为明度和饱和度的区分，也是理解接下来颜色空间，以及颜色度量方法发展的关键。</p><p>所以接下来我准备用大白话，很明确的区分开颜色的这两个属性，在这里我们首先要明白，CIE制定的颜色的这三个属性，色调、饱和度、明度，他们是完全独立的三个属性，并且在描述一种颜色时，缺一不可。为啥？接下来就明白啦</p><h5 id="1-4-1-明度"><a href="#1-4-1-明度" class="headerlink" title="1.4.1 明度"></a>1.4.1 明度</h5><p>如果要用一句话来描述明度，那就是天黑了和天亮了~</p><p>恩，说到这你可能豁然开朗了吧，如果还不明白，请往下看</p><p>如果此刻蓝天白云太阳高照，请朝太阳的方向看，你会发现太阳旁边的天空是白色的。然后逐渐移动你的视线，远离太阳，你会发现天空越来越蓝。如果你身怀特异功能，有一双透视眼，能看到地球另一端，那么你会发现，在太阳光线触及不到的位置，也就是地平线以下，天空慢慢变灰、变暗、然后变黑。</p><p>这一过程就是只改变明度，色调和饱和度不变时，颜色的变化。</p><p>说到这我们可能明白了，明度不就是光照嘛。没有光，我们啥都看不见。</p><p>但是生活中我们可能不会太注意，光可不仅仅是影响看的见看不见这么简单。</p><p>就像上面所说的，从没有光到极强光，颜色变化为：黑-&gt;暗黑-&gt;暗-&gt;暗原色-&gt;原色-&gt;浅原色-&gt;白</p><p>一如上图：</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-47d55ffbc9434fe6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/299" alt="img"></p><p>饱和度垂直轴表示法</p><p>所以在颜色模型里，我们通常描述明度的变化为，0到10，也就是从黑到灰到白。而且当明度为0，也就是黑色时，任何颜色都是黑色。当明度为10，也就是白色时，任何颜色都是白色。</p><p>如果你会用PS，可以新建一个图层，填充颜色为红色，然后把明度从黑移到白，来查看颜色的变化。如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-bce074a4d3478273.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/673" alt="img"></p><p>6.gif</p><h5 id="1-4-2-饱和度"><a href="#1-4-2-饱和度" class="headerlink" title="1.4.2 饱和度"></a>1.4.2 饱和度</h5><p>说完了明度，再来说饱和度应该就比较好理解了。饱和度通俗的说，可以叫纯度，或者颜色的鲜艳程度。它在半径表示法上的表现就是，从饱和度0%到饱和度为100%的过程。</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-22bbedb395666cf8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/212" alt="img"></p><p>半径表示法</p><p>而当饱和度为0时，我们看到的颜色，也就变成了明度的数值，也即黑白灰。</p><p>所以当固定明度为一定数值（为了能看见色彩，不能是0或10）时，饱和度从0%到100%变化的过程，直观的来看，也就是从：一定数值的灰度-&gt;灰原色-&gt;淡原色-&gt;纯原色</p><p>也即1.2节示例图：</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-22103ae5d66641c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/212" alt="img"></p><p>示例</p><p>直白的来说，就是纯红，慢慢加入一定比例数值的灰色，最终变成了灰色。</p><p>教材里说完全饱和的颜色，是指没有掺入白光所呈现的颜色。这句话也是正确的，那要怎么理解呢？</p><p>首先从颜色的定义来解释，因为颜色是我们对可见光的一种感知，而可见光属于电磁波。如果我们看见的颜色，仅由一种波长的电磁波组成，那它就是完全饱和。</p><p>如果更直白一点，就是我们慢慢的加入的一定比例的灰色，其实也是一定比例的白光。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>如果在PS上打开拾色器，可以看到下图</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-eae6960a2d8eaa77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/273" alt="img"></p><p>PS拾色器</p><p>这里最左边从下到上，是明度的变化。从右到左，是饱和度的变化。可以看到在图的下方，当明度数值比较低的时候，饱和度的变化，引起的颜色变化很小。</p><h5 id="明度和饱和度区分的重要性"><a href="#明度和饱和度区分的重要性" class="headerlink" title="明度和饱和度区分的重要性"></a>明度和饱和度区分的重要性</h5><p>要明白这点，首先得明白颜色的应用场合。其实想想也明白，我们都在什么场景下会用到颜色？如果分成两大类，一个就是显示器，另一个，就是印刷品或画画等纸质操作。</p><p>显示器就不用说了，它能很好的表现出色调、饱和度、明度等属性，并且我们的显示器，普遍都能调节亮度（明度）、饱和度，甚至对比度，所以能很好的模拟现实场景。而在纸质品上，现实场景的明暗关系，通过将明度转换成从黑到白的颜料，然后在光照下观看，也能很好模拟。</p><h5 id="2-颜色空间"><a href="#2-颜色空间" class="headerlink" title="2. 颜色空间"></a>2. 颜色空间</h5><p>说完了上面这些，为啥又跳到颜色空间了？有这个问题得先弄清楚，为啥CIE要定义颜色的这几个属性，这就像我们在数学上，定义笛卡尔坐标系一样。在二维坐标或者三维空间中，我们定义坐标系，是为了准确的定义，或者找出其中某个点，就像给家家户户上门牌号一样。</p><p>而色调、饱和度、明度这几个属性呢，也是为了在颜色空间中，准确的找出是哪一种颜色。</p><p>但是有一点，颜色空间由于历史和科学的发展，产生了许许多多颜色空间，来描述颜色。</p><h5 id="2-1-颜色空间和颜色模型有啥关系？"><a href="#2-1-颜色空间和颜色模型有啥关系？" class="headerlink" title="2.1 颜色空间和颜色模型有啥关系？"></a>2.1 颜色空间和颜色模型有啥关系？</h5><p>它们互为同义词，说白了，它们是一个东西，只不过在不同的场合，叫法不一样而已。</p><p>颜色空间多数应用在数学场景下，通常用三维模型来表示，也就是代表三个参数的三维坐标来指定，它描述了颜色在颜色空间中的位置。而这三个参数，并没有直白的说明是什么颜色，这得取决于它的坐标。意思是你得拿着坐标，到颜色空间中找到它，才知道是啥颜色。</p><p>例如HSB/HSV（hue, saturation, brightness/value）颜色空间，它直接用色调、饱和度、明度作为坐标轴。色调用角度标定，红色为0度，青色为180度，饱和度用半径大小表示，明度用垂直轴表示。这种颜色空间，现在应该很熟悉了</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-84571b7a91e243ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/277" alt="img"></p><p>HSB/HSV颜色空间</p><h5 id="2-2-颜色空间的分类"><a href="#2-2-颜色空间的分类" class="headerlink" title="2.2 颜色空间的分类"></a>2.2 颜色空间的分类</h5><h5 id="颜色空间有设备相关和设备无关之分"><a href="#颜色空间有设备相关和设备无关之分" class="headerlink" title="颜色空间有设备相关和设备无关之分"></a>颜色空间有设备相关和设备无关之分</h5><p>因为颜色的视觉效果，是基于设备和材料的。当设备和材料改变时，对应的颜色效果就会发生变化。所以我们称这样的颜色空间，为设备相关颜色空间，如RGB和CMYK颜色空间。当不同呈色模式的设备来表现同一颜色时，对应的颜色数值是不同的。</p><p>而如在HSB的基础上，建立起来的CIE L<em>a</em>b*颜色空间（后面会讲），直接用一组数值来模拟人类的颜色视觉，而不是使用一组所需要的数值去驱动一个特定设备来生成颜色，其色彩数值与设备无关，所以这样的颜色空间称为设备无关颜色空间。</p><p>作者：金架构<br>链接：<a href="https://www.jianshu.com/p/47f0f90cb392">https://www.jianshu.com/p/47f0f90cb392</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> 音视频基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 颜色空间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>俗称照片的彩色数字图像</title>
      <link href="%E4%BF%97%E7%A7%B0%E7%85%A7%E7%89%87%E7%9A%84%E5%BD%A9%E8%89%B2%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F.html"/>
      <url>%E4%BF%97%E7%A7%B0%E7%85%A7%E7%89%87%E7%9A%84%E5%BD%A9%E8%89%B2%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F.html</url>
      
        <content type="html"><![CDATA[<p>这篇文章会按照下面这个路线图进行介绍，阅读本文需要三分钟，详细阅读本文需要半小时。</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-69a0a84c224a5377.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/940" alt="img"></p><p>本文路线</p><p>流程图最后一项，伽马矫正、JPEG压缩编码和文件格式，只做粗略的理论介绍。因为伽马矫正和压缩编码，需要在实际应用，并且结合其他知识来理解，所以在后面会单开几篇。</p><h5 id="1、颜色是啥和我们为什么能看到它"><a href="#1、颜色是啥和我们为什么能看到它" class="headerlink" title="1、颜色是啥和我们为什么能看到它"></a>1、颜色是啥和我们为什么能看到它</h5><p>颜色是啥，它其实是我们的视觉系统，对可见光的一种感知。如果我们是瞎子，那人类肯定不会发现还有颜色这种神奇的东西。光透过我们的眼睛，传入我们的大脑，就像照相机咔嚓一声，将一幅图片记录到内存卡。</p><p>早在之前，人类就发现<strong>光是一种电磁波</strong>，而人类并不能看见所有的电磁波，因此把能看见的电磁波，定为可见光。它的波长在380和780nm之间，</p><p>我们在自然界看到的大多数光，都不是一种波长的光，它是由许许多多，不同波长的光组合而成，因此我们才能看到这么多颜色。</p><p>就像我们看到的太阳光，它也是由多种不同颜色的光组合而成。我们小时候都玩过镜子，用一面镜子，来折射太阳光线到水里，光线再通过水折射到墙上，就出现了彩虹。而牛顿，很早的时候就用棱镜演示了这个事实：<strong>白光包含所有可见光谱的波长。</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-cc07e142604178a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200" alt="img"></p><p>光谱色</p><p>在人的视网膜中，有三种对红绿蓝敏感程度不同的椎体细胞，视网膜通过神经元感知外部世界的颜色，而每个神经元，是一个对颜色敏感的椎体。红绿蓝三种椎体细胞，对不同频率的光的感知不同，对不同亮度的感知程度也不同。所以后来人们在数字化图像的时候，面对巨大的数据量，就可以使用压缩编码技术，来降低图像的数据量，而使人眼感觉不到图像质量的下降。</p><h3 id="2、图像的颜色模型"><a href="#2、图像的颜色模型" class="headerlink" title="2、图像的颜色模型"></a>2、图像的颜色模型</h3><h5 id="2-1-RGB相加混色模型"><a href="#2-1-RGB相加混色模型" class="headerlink" title="2.1 RGB相加混色模型"></a>2.1 RGB相加混色模型</h5><p><strong>一个能发出光波的物体称为有源物体，它的颜色，由该物体发出的光波决定。</strong>就像彩色CRT一样，三个电子枪分别产生R、G、B三种波长的光，并以各种不同的相对强度组合产生不同的颜色。</p><p>因为R、G、B颜色模型是用三种光叠加，来产生特定的颜色，所以这种方法又称为RGB相加混色模型。</p><p>在自然界中，任何一种颜色，都可以用R、G、B这三种颜色值之和来确定，在数学书，它们构成一个三维的RGB矢量空间。所以只要R、G、B的数值不同，混合得到的颜色就不同，也就是光波的波长不同。</p><h5 id="3-2-第二个属性：像素深度和阿尔法（α）通道"><a href="#3-2-第二个属性：像素深度和阿尔法（α）通道" class="headerlink" title="3.2 第二个属性：像素深度和阿尔法（α）通道"></a>3.2 第二个属性：像素深度和阿尔法（α）通道</h5><p>像素深度其实就是，存储每个像素所用的位数（科普：1GB=1024MB 1MB=1024KB 1KB=1024B   B俗称字节  1字节等于八位，单位bit）。比如一个用RGB三个分量表示的彩色图像，若每个分量用8位表示，那么一个像素共用24位表示，我们就说图像的像素深度为24位</p><h5 id="3-2-1-像素深度的意义"><a href="#3-2-1-像素深度的意义" class="headerlink" title="3.2.1 像素深度的意义"></a>3.2.1 像素深度的意义</h5><p>像素深度决定了“彩色图像”的每个像素可能有的颜色数，或者是“灰度图像”的每个像素可能有的灰度级数。比如当像素深度为24位时，那么每个像素可以是16777216（2的24次方）种颜色的一种。</p><p>对于追求完美的人估计会说，如果我们提高像素深度，那每个像素能显示的颜色种类不就更多了，图像也就更细腻更自然了。</p><p>理论上确实是这样，但是一旦我们提高了像素深度，图像所对应的存储空间也急剧上升。请注意像素深度是表示一个像素所占的空间，对于一幅分辨率为640x480，像素深度为24位的图像，它所占的空间为 640 x 480 x 3 = 921600字节。</p><p>而且受到设备和人眼分辨率的限制，像素深度不一定要特别深。普通人在正常情况下，只能识别二百多种颜色，多达一千六百多万种的颜色已然足足够用。</p><h5 id="3-2-2-阿尔法（α）通道"><a href="#3-2-2-阿尔法（α）通道" class="headerlink" title="3.2.2 阿尔法（α）通道"></a>3.2.2 阿尔法（α）通道</h5><p>假设一幅图像的每个像素，用32位来表示，那么它的最高8位，就称为8位α通道，其余24位是颜色通道，红、绿、蓝分量各占一个8位通道。</p><h5 id="3-2-3-α通道的作用"><a href="#3-2-3-α通道的作用" class="headerlink" title="3.2.3 α通道的作用"></a>3.2.3 α通道的作用</h5><p>它用于表示像素在对象中的透明度（alpha）。比如用两幅图像A和B混合成一幅新图像，那么新图像C的像素为：C的像素 = （alpha）x（A的像素) + （alpha）x（B的像素) 。式中的alpha就是α的值。</p><p>再举个例子，如果一个像素用（A，R，G，B）四个分量表示，A表示α的值，取值0到1。则像素值为（1，1，0，0）时表示红色，并且红色强度为1，可以理解为完全不透明的红色。</p><p>如果像素值为（0.5，1，0，0），使用0.5乘R、G、B三个分量，得出（0.5，0.5，0，0），表示红色的强度为0.5，可以理解为红色半透明。</p><h5 id="3-3-第三个属性：真彩色、伪彩色和直接色"><a href="#3-3-第三个属性：真彩色、伪彩色和直接色" class="headerlink" title="3.3 第三个属性：真彩色、伪彩色和直接色"></a>3.3 第三个属性：真彩色、伪彩色和直接色</h5><h5 id="3-3-1-真彩色"><a href="#3-3-1-真彩色" class="headerlink" title="3.3.1 真彩色"></a>3.3.1 真彩色</h5><p>这个应该比较好理解，它是指每个像素的颜色值，用RGB表示的颜色。例如用RGB 5：5：5表示图像颜色，R、G、B各用5位，其值大小，直接确定三个基色的强度。这样得到的彩色，是真实的原图彩色。</p><h5 id="3-3-2-伪彩色"><a href="#3-3-2-伪彩色" class="headerlink" title="3.3.2 伪彩色"></a>3.3.2 伪彩色</h5><p>它指每个像素的颜色值，不是通过R、G、B三个分量直接确定的，而是通过彩色查找表，查找要显示图像的R、G、B值，以此来生成彩色。</p><p>这样解释可能不太好懂，因此我找了个例子。在有伪彩色应用的显示设备中，帧缓存显示图像的时候，会使用某一颜色值的索引，到彩色查找表里，查找对应的RGB分量值。流程图如下</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-205ca9330a2095c2.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="img"></p><p>彩色查找表查找显示</p><p>这样通过查找得到的彩色是真的，但不是图像本身真正的颜色，它并没有反应原图真正的颜色。因此称为伪彩色</p><h5 id="3-3-3-直接色"><a href="#3-3-3-直接色" class="headerlink" title="3.3.3 直接色"></a>3.3.3 直接色</h5><p>把每个像素的RGB三个分量，作为单独的索引值对它做变换，并用变换后的R、G、B值产生颜色。注意重点是变换，至于怎么变换，可以先忽略。</p><h5 id="4-图像的种类"><a href="#4-图像的种类" class="headerlink" title="4. 图像的种类"></a>4. 图像的种类</h5><p>图像的种类常分为两种，这里说的种类，并不是指png、jpeg，这是图像的格式，而不是种类。图像的种类是指，表示图像所用的方法。</p><h5 id="4-1-位图"><a href="#4-1-位图" class="headerlink" title="4.1 位图"></a>4.1 位图</h5><p>在之前的时候，曾多次重复过栅格图像这个概念（因为是写系列文章，所以我不再重复啦）。</p><p>在描述一幅图像的时候，作为普通人，我们所认知的图像，多数是比如人物、风景等存在手机里的图片，这样的图像是使用栅格图像的方法来描述的。每幅图像，都由许多像素组成，就像我们小时候玩的拼图。</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-7268d08ad7c34364.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/518" alt="img"></p><p>位图</p><p>如果作为普通用户，我们就会想，图像不都是这样嘛，不用一个像素一个像素表示，那要怎么表示呢。</p><p>举个例子，我们平常聊天的时候会发表情，而表情可以简单分为符号表情和Emoji表情（图像表情）。符号表情类似为₍₍◡( ╹◡╹ )◡₎₎  ，Emoji表情就不用说了吧。注意观察符号表情，它只是由竖线、半圆或其他几何形状表示。</p><p>而在图像的表示法里面，图像的另外一种表示方法，也类似。</p><h5 id="4-2-矢量图"><a href="#4-2-矢量图" class="headerlink" title="4.2 矢量图"></a>4.2 矢量图</h5><p>矢量图是使用点、线、弧、曲线、多边形或者其他几何形状和位置，来表示图像的一种方法。实际上就是使用各种数学表达式来描述一幅图，然后转化成计算机语音再显示出来。</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-3162ce6709649aff.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/452" alt="img"></p><p>矢量图</p><p>就像描述一个三角形的时候，我们只需要知道三个点，就可以得到一幅图像。</p><h5 id="矢量图和位图对比"><a href="#矢量图和位图对比" class="headerlink" title="矢量图和位图对比"></a>矢量图和位图对比</h5><p><img src="https://upload-images.jianshu.io/upload_images/4272749-b09bf47eb2a09671.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200" alt="img"></p><p>矢量图（左）和位图（右）</p><p>在矢量图表示法中，因为图中的几何形状简称对象，都是使用数学规则来描述的，所以在显示的时候，无论是放大还是缩小，或者移动旋转拷贝，都是比较容易做到的。而且在放大或缩小的时候，图像依然能够保持清晰。</p><p>为什么？就拿矩形来说，如果我放大了，矩形的四个点，只是在屏幕上的坐标位置变了下，中间依然是靠线段连接，如左图，图像并不会失真。它并不会像位图那样，放大到最后，会看到图像的像素块，如右图。</p><p>而且矢量图在计算机存储的时候，存储的是数学规则，并且可以把类似的图形做统一处理，所以在文件大小方面较好掌控。而位图则是把每个像素都存起来，图像分辨率高、像素深度深的时候，占的空间会比较大。</p><h5 id="那为什么我们手机里的图像，还是位图呢？"><a href="#那为什么我们手机里的图像，还是位图呢？" class="headerlink" title="那为什么我们手机里的图像，还是位图呢？"></a>那为什么我们手机里的图像，还是位图呢？</h5><p>第一点，这是因为，真实世界里的景象纷杂无序，很难用规则的几何图形去表达。</p><p>第二点，是因为，真实世界里色彩纷杂，颜色变化阴暗透明起承转合，如果几何图形再加上颜色变化，难上加难。</p><p>所以总结起来，位图较多用来描述风景、人物，等不规则且色彩丰富的图像。而矢量图因为它无限放大而不失真的特性，在一些文字设计、标志设计方面应用广泛。</p><h5 id="5-灰度图和彩色图像"><a href="#5-灰度图和彩色图像" class="headerlink" title="5. 灰度图和彩色图像"></a>5. 灰度图和彩色图像</h5><h5 id="5-1-灰度图"><a href="#5-1-灰度图" class="headerlink" title="5.1 灰度图"></a>5.1 灰度图</h5><p>这两种比较好理解，灰度图就是只有明暗像素，没有彩色像素组成的图像。就像我们小时候看的黑白电视。</p><p>再细分下去，当只有黑白两种颜色时的图像，称为单色图像。这样一来，它的每个像素的像素值，用一位（一个比特位/bit）来存储，值为”0“或”1“，像素点非黑即白。</p><p>而一个标准的灰度图，一个像素用一个字节（8位）表示，这样每个像素的值就可以为，0~255（二的八次方）之间的任意值，称为256级灰度。当图像的分辨率为640X480的时候，它的存储空间为300KB（640*480/1024）。</p><p>下图是<strong>标准单色图</strong>和<strong>标准灰度图</strong>的对比。</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-a03ed33d57e79c3a.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/986" alt="img"></p><p>标准单色图和标准灰度图的对比</p><h5 id="5-2-彩色图像"><a href="#5-2-彩色图像" class="headerlink" title="5.2 彩色图像"></a>5.2 彩色图像</h5><p>现在看到这个词应该很熟悉吧，说一下它的特性会更熟悉。彩色图像的每个像素，包含了图像的颜色信息。</p><p>在划分彩色图像的时候，一般用颜色的数目来划分。比如：</p><p>256色图像：它是指像素的R、G、B三个值，用一个字节来表示，这样一个像素点可能的颜色值，就为256（二的八次方）色之一。</p><p>真彩色图像：每个像素的R、G、B值，分别用一个字节来表示。这样一个像素点可能的颜色值，就为1677万（二的二十四次方）多色之一。这里的真彩色图像，相对于<a href="https://www.jianshu.com/p/e5e2c013ba02">图像（一）</a>中，又多了一层含义。它表示了这种图像，达到了人眼分辨率的极限，反应了原图的真实色彩。故称为真彩色。当图像的分辨率为640X480时，它的存储空间为900KB（640<em>480</em>3/1024）。</p><h5 id="6-伽马矫正"><a href="#6-伽马矫正" class="headerlink" title="6. 伽马矫正"></a>6. 伽马矫正</h5><p>这个词应该很多人都听过，即使不是专业人士，也可能早有耳闻。</p><p>在很多教材中，说之所以有伽马矫正这个东西，是因为摄像机或手机的摄像头，在采集自然界图像的时候，光的摄入和摄像机电压的转换，并不是线性的。</p><p>而在显示的时候，CRT发射的光的强度，和它的输入电压也不是线性的。</p><p>这样就会导致，从采集的一幅图像，到存储成图像文件，再到读出图像文件，在显示器上显示的时候，我们看到的显示出来的图像，并不是最开始采集的图像。</p><p>为了解决这个问题，就有了伽马矫正这个东西。</p><p>它在采集和显示图像的时候，分别进行矫正，以达到还原原始场景的目的。</p><p>在伽马矫正这个问题上，讨论很多，知乎上有一个高票答案，讨论关于广义的伽马矫正，有兴趣的朋友可以看下，真的很有趣，链接如下：</p><p><a href="https://link.jianshu.com/?t=https://www.zhihu.com/question/27467127">https://www.zhihu.com/question/27467127</a></p><h5 id="7-图像的压缩编码"><a href="#7-图像的压缩编码" class="headerlink" title="7. 图像的压缩编码"></a>7. 图像的压缩编码</h5><p>具体的压缩编码后面再讲，这里只粗略讲一下，为啥要进行压缩编码。</p><p>恩，如果不进行压缩编码，图像会很大，完全不利于网络传输。而且普通人只能分辨二百多种颜色，多了也看不出来，所以1677万完全浪费。</p><p>所以后来就有了JPEG压缩编码，注意这里说的JPEG，是指一种图像数据的压缩编码标准，并不是JPEG格式。</p><h5 id="什么是格式，什么是标准"><a href="#什么是格式，什么是标准" class="headerlink" title="什么是格式，什么是标准"></a>什么是格式，什么是标准</h5><p>标准是指，在压缩图像数据的时候，该采用什么算法、怎样的流程去压缩，注意目的是怎么压缩。</p><p>而格式是指，存放使用JPEG标准压缩的图像文件格式。</p><h5 id="8-图像的文件格式"><a href="#8-图像的文件格式" class="headerlink" title="8. 图像的文件格式"></a>8. 图像的文件格式</h5><p>自从图像进入计算机以来，已经开发出了很多种图像文件存储格式，而且互不兼容。有些不兼容的格式，使用起来很不方便，需要使用特定的软件，因此有些格式也在逐渐被淘汰。</p><p>目前流行的图像格式为：GIF、JPEG、PNG。</p><p>具体他们之间有什么区别，又是如何产生，有何渊源，等用到的时候再写，用不到就自动忽略了~~~</p><p>作者：金架构<br>链接：<a href="https://www.jianshu.com/p/0529ced280e0">https://www.jianshu.com/p/0529ced280e0</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> 音视频基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字图像 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>显示器是如何显示图形数据的</title>
      <link href="%E6%98%BE%E7%A4%BA%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E5%BD%A2%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80.html"/>
      <url>%E6%98%BE%E7%A4%BA%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E5%BD%A2%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-最早的显示器"><a href="#1-最早的显示器" class="headerlink" title="1. 最早的显示器"></a>1. 最早的显示器</h3><p>在十八世纪，人类对电的研究渐渐成熟，而电在图形学方面的应用却还是一个空白，除了在世纪初的时候，电弧光灯率先被发明，它打开了人类对光的探索。人类开始猜想，我们是不是可以把一个活动的景象，通过电来传送并且复现。</p><p>开始的时候，<strong>行扫描</strong>概念被提出，也就是可以把一幅图像，分成一行一行进行扫描，传真装置因此诞生。之后，有一个人提出，我们是不是可以把图像分为栅格的形式，也就一个一个小格子，每个格子显示一个颜色，拼接起来，就是完整的一幅图像，这个学说被沿用至今。而光有<strong>行扫描</strong>和<strong>栅格图像</strong>还不够，因为虽然学说有了，但是还是没有把图片数字化。而在同一时间，光电管被发明，这种装备可以实现光和电的互相转换。另外一个哥们在这些基础上，结合电磁波载波，发明了电视，而那时候的显示，只能达到每秒5帧，每帧（关于帧，下面会进行说明）30行。</p><h3 id="2-CRT显示器"><a href="#2-CRT显示器" class="headerlink" title="2. CRT显示器"></a>2. CRT显示器</h3><p>在十八世纪末的时候，有一个更牛逼的哥们发明了一件装备，它能把电信号转化为光信号。听着像上面提到的光电管，然而并不是，它被称为<strong>阴极射线管</strong>，英文名<strong>CRT（Cathode Ray Tubes）</strong>。此后诞生了一系列电子显示器（CRT显示器），在开始详细介绍它之前，先来看一组图片。</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-96f8b8770055fd4f.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/490" alt="img"></p><p>示例图0</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-9be82dee2f0ca554.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/415" alt="img"></p><p>示例图1</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-9088b82e6f5fe773.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/400" alt="img"></p><p>示例图2</p><p>别看这些大块头，现在觉得很Low又笨重。事实上，在高中的时候我们机房用的都是这种显示器。它奠定和引导了显示器的突飞猛进，它同时也证明了一个定理，一个新事物只有起步的时候是最难的，你若坚持，此后一帆风顺。</p><p>好了，现在来看一下CRT的原理图，它是了解和处理视频数据的基础。</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-2696c58f838fdf51.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/774" alt="img"></p><p>CRT的原理图</p><p>这个就是CRT，看着像手电筒，其实并不是。手电筒产生的是散光或不均匀光，而CRT产生的是均匀光。它的原理是通过电子枪发射“一束”电子，通过聚焦、偏转等手段，打到涂有荧光层的屏幕上进行发光。在前面的栅格图像学说的理论之下，由一束电子点亮的屏幕一点，称为一个<strong>像素</strong>。而CRT无重叠的打到屏幕上的最多点数称为<strong>分辨率</strong>，如我们熟知的1280X1024，它表示屏幕上最多有1280X1024个点可以被点亮。</p><p><strong>好的显示器，在同样的物理尺寸的情况下，像素点更小，能够显示的点数更多，分辨率更大，因而画质更细腻。</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-4829fdd513e30c25.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200" alt="img"></p><p>CRT显示器的扫描原理</p><p>这张图是CRT显示器的扫描原理，也是著名的<strong>光栅扫描显示器</strong>（光栅一词来源于光学，它的本意是，由大量等宽等间距的平行狭缝构成的光学器件。而CRT显示器一行行扫描，形成的图案，类似光栅）。典型的CRT采取<strong>逐行扫描</strong>的方式，当然也有<strong>隔行扫描</strong>和<strong>随机扫描</strong>的方式，不过在本文中不做研究。</p><p>在电子束沿每一行扫描的时候，它的强度要不断变化，从而生成一幅图像。这个图像的图形定义，也就是每一个像素的<strong>亮度、颜色</strong>等信息，保存在<strong>帧缓存（刷新缓存/颜色缓存）</strong>里面，<strong>帧是指整个屏幕</strong>。电子束从首行开始，到扫完尾行完成一幅图案的显示，这称为<strong>一帧</strong>。CRT每完成一帧，自动返回到左上角，开始扫描下一帧。</p><p>而<strong>人眼在每秒25帧的情况下，能自动把图片视为连续的动画，30帧以上，会觉得不卡。</strong>现在普遍的显示器，每秒都能打到60帧以上，大多数能达到100多帧。例如随便搜个显示器，如下图</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-c94731dc3c78bfcb.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/776" alt="img"></p><p>某显示器参数</p><p>它的响应时间（点亮一像素所需要的时间）为5ms，每秒最多能显示1000ms/5ms=200帧</p><p>在显示器（一）中，展示了单个电子枪，发射电子到荧光屏幕，会点亮一个像素。而且不难猜到，这个像素的颜色，只能是黑或白，或者它们的混合色，也就是灰色，就像我们小时候看的黑白电视。</p><h3 id="3-彩色CRT"><a href="#3-彩色CRT" class="headerlink" title="3. 彩色CRT"></a>3. 彩色CRT</h3><p>而如果要点亮一个<strong>彩色像素点</strong>，就需要<strong>彩色CRT</strong>，如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-39c9b98d0eb512e3.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/660" alt="img"></p><p>彩色CRT</p><p>彩色CRT的原理，就是分别点亮R（红）、G（绿）、B（蓝）三基色的荧光点，每个荧光点发出对应强度值的光，因为三个荧光点距离非常小，从而在人眼看来，看到的是三个荧光点组合之后的彩色亮光。</p><p>在CRT之后，又出现了一大批显示器，如等离子显示器、LED显示器、LCD显示器，虽然成像方式变了，但是成像原理并没有变。所以对于做音视频开发的从业人员，它们之间的区别可以忽视。</p><h3 id="4-光栅扫描系统"><a href="#4-光栅扫描系统" class="headerlink" title="4. 光栅扫描系统"></a>4. 光栅扫描系统</h3><p>虽然成像方式之间的区别可以忽视，但对于开发者来说，图像的显示流程是绝不可以忽视的。</p><p>伴随着CRT的产生，人们根据显示器的显示原理，定义出了一系列的计算机图形学名词，例如帧缓存（在今天，可以简单的理解为显存）、帧率（每秒显示帧数）、分辨率，以方便描述显示器是如何工作的。</p><p>而且我们知道，一幅图像可以通过行扫描、和光栅图像，被数字化并保存到帧缓存里。然后电子枪根据帧缓存里，保存的每一像素的强度、颜色等信息，调节自身电压、并在荧光屏幕上打出对应的像素点。</p><p>如果把这一流程进行模块化，其实只有简单的两个模块，那就是<strong>帧缓存</strong>和<strong>CRT（显示器）</strong>。</p><p>在后来研发的图形用户界面的计算机系统中，这两个模块，被集成到了计算机中，他们通过视频控制器来支配。下图为最简单的图形用户界面计算机的显示流程，因为这一流程，是在显示器显示原理之下发展出来的，所以通常称为<strong>光栅扫描系统</strong>。</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-2a0f17fe0fbfc714.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1028" alt="img"></p><p>较早的光栅扫描系统</p><p>右侧的监视器就是我们的显示器，而帧缓存和其他数据一样，被放在了系统存储器中。视频控制器连接总线，提取像素信息，进行图形数据的显示。后来，人们又在这一基础上进行优化。于是变成了这样子</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-7cdab68b66b73ca4.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1194" alt="img"></p><p>改进的光栅扫描系统</p><p>系统存储器被开辟出一个固定区域，用来存储帧缓存，由视频控制器直接访问。</p><p>这样一来，它的显示流程一步步清晰和模块化。</p><p>在显示图像的时候，视频控制器将两个寄存器（存放变量的地方）x和y分别置为0和y_max，搞两个寄存器是因为显示器是一个二维笛卡尔坐标系，因此屏幕上任一点都可以根据x和y值来锁定。它的原点在左下角，向右和向上分别为x和y正方向。</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-4e4bd2e47b79e5b2.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/427" alt="img"></p><p>而光栅扫描是从左上角开始，所以开始时的坐标为（0，y_max）。</p><p>然后CPU根据坐标位置，到存储器取出帧缓存中，对应的像素值，显示器根据像素值进行显示。</p><p>后来由于计算机图形学的迅猛发展，需要处理的图形信息越来越复杂，单靠CPU处理图形数据，已经不能满足需求。于是诞生了<strong>显示处理器（GPU）</strong>，俗称<strong>显卡</strong>。而帧缓存，也从系统存储器中，挪到了显示处理器存储器（<strong>显存</strong>）中来存储。</p><p><img src="https://upload-images.jianshu.io/upload_images/4272749-72b792be02dd2a5f.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/690" alt="img"></p><p>最新的光栅扫描系统</p><p>至此，关于显示器这方面，图形数据的显示先告一段落。接下来会从图像（也就是我们平常拍的照片）入手，来讨论<strong>图像的数字化过程</strong>，期间也会进一步加深对光栅扫描系统的理解~</p><h3 id="关于学习资源"><a href="#关于学习资源" class="headerlink" title="关于学习资源"></a>关于学习资源</h3><p>如果想更详细的了解这一部分内容，可以查阅<strong>《计算机图形学》</strong>，以下为PDF版：<br> <a href="https://pan.baidu.com/s/1c1WPxVq">https://pan.baidu.com/s/1c1WPxVq</a></p><p>作者：金架构<br>链接：<a href="https://www.jianshu.com/p/7392dc5a4e05">https://www.jianshu.com/p/7392dc5a4e05</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> 音视频基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -显示器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H264基础知识</title>
      <link href="H264%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html"/>
      <url>H264%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>版权声明：本文为博主原创文章，遵循<a href="http://creativecommons.org/licenses/by-sa/4.0/"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接和本声明。</p><p>本文链接：<a href="https://blog.csdn.net/go_str/article/details/80340564">https://blog.csdn.net/go_str/article/details/80340564</a></p></blockquote><h2 id="H264概述"><a href="#H264概述" class="headerlink" title="H264概述"></a>H264概述</h2><p>H264 是 MPEG-4 标准所定义的编码格式，标准写法应该是H.264。</p><p>H264 视频格式是经过<strong>有损压缩</strong>的，但在技术上尽可能做的降低存储体积下获得较好图像质量和低带宽图像快速传输。 </p><p>H264压缩技术主要采用了以下几种方法对视频数据进行压缩。包括：</p><ul><li>帧内预测压缩，解决的是空域数据冗余问题。</li><li>帧间预测压缩（运动估计与补偿），解决的是时域数据冗余问题。</li><li>整数离散余弦变换（DCT），将空间上的相关性变为频域上无关的数据然后进行量化。</li><li>CABAC压缩。</li></ul><p><strong>H264结构中，一个视频图像编码后的数据叫做一帧，一帧由一个片（slice）或多个片组成，一个片由一个或多个宏块（MB）组成，一个宏块由16x16的yuv数据组成。宏块作为H264编码的基本单位。</strong></p><p>在H264协议内定义了三种帧，分别是I帧、B帧与P帧。I帧就是之前所说的一个完整的图像帧，而B、帧与P帧所对应的就是之前说的不编码全部图像的帧。P帧与B帧的差别就是P帧是参考之前的I帧而生成的，而B帧是参考前后图像帧编码生成的。</p><p>经过压缩后的帧分为：<strong>I帧，P帧和B帧</strong>:</p><ul><li>I帧：关键帧，采用<strong>帧内压缩</strong>技术。你可以理解为这一帧画面的完整保留；解码时只需要本帧数据就可以完成（因为包含完整画面）</li><li>P帧：向前参考帧，在压缩时，只参考前面已经处理的帧。采用<strong>帧间压缩</strong>技术。P帧表示的是这一帧跟之前的一个关键帧（或P帧）的差别，解码时需要用之前缓存的画面叠加上本帧定义的差别，生成最终画面。（也就是差别帧，P帧没有完整画面数据，只有与前一帧的画面差别的数据）</li><li>B帧：双向参考帧，在压缩时，它既参考前而的帧，又参考它后面的帧。采用<strong>帧间压缩</strong>技术。B帧记录的是本帧与前后帧的差别（具体比较复杂，有4种情况），换言之，要解码B帧，不仅要取得之前的缓存画面，还要解码之后的画面，通过前后画面的与本帧数据的叠加取得最终的画面。B帧压缩率高，但是解码时CPU会比较累~。</li></ul><p>还有一个概念是，<strong>IDR帧</strong>：</p><p>一个序列的第一个图像叫做 IDR 图像（立即刷新图像），<strong>IDR 图像都是 I 帧图像</strong>。<strong>H.264 引入 IDR 图像是为了解码的重同步，当解码器解码到 IDR 图像时，立即将参考帧队列清空，将已解码的数据全部输出或抛弃，重新查找参数集，开始一个新的序列</strong>。这样，如果前一个序列出现重大错误，在这里可以获得重新同步的机会。<strong>IDR图像之后的图像永远不会使用IDR之前的图像的数据来解码</strong>。<strong>IDR 图像一定是 I 图像，但I图像不一定是 IDR 图像</strong>。一个序列中可以有很多的I图像，I 图像之后的图像可以引用 I 图像之间的图像做运动参考。</p><p>还有一点注意的，对于 IDR 帧来说，在 <strong>IDR 帧之后的所有帧都不能引用任何 IDR 帧之前的帧</strong>的内容，与此相反，对于普通的 I 帧来说，位于其之后的 B- 和 P- 帧可以引用位于普通 I- 帧之前的 I- 帧。从随机存取的视频流中，播放器永远可以从一个 IDR 帧播放，因为在它之后没有任何帧引用之前的帧。但是，不能在一个没有 IDR 帧的视频中从任意点开始播放，因为后面的帧总是会引用前面的帧。</p><p>继续再多补充一个概念，<strong>图像组（**</strong>GOP）**：</p><p>一个序列就是一段内容差异不太大的图像编码后生成的一串数据流。当运动变化比较少时，一个序列可以很长，因为运动变化少就代表图像画面的内容变动很小，所以就可以编一个 I 帧，然后一直 P 帧、B 帧了。当运动变化多时，可能一个序列就比较短了，比如就包含一个 I 帧和 3、4个P帧。</p><p>GOP是画面组，一个GOP是一组连续的画面。<br>GOP一般有两个数字，如M=3，N=12。M指定I帧与P帧之间的距离，N指定两个I帧之间的距离。那么现在的GOP结构是：</p><p><img src="https://img-blog.csdnimg.cn/20200519205304320.png" alt="img"></p><p>I 帧、B帧、P帧还有一些特点，如下：<br><strong>I帧特点:</strong><br>1)它是一个全帧压缩编码帧。它将全帧图像信息进行JPEG压缩编码及传输;<br>2)解码时仅用I帧的数据就可重构完整图像;<br>3)I帧描述了图像背景和运动主体的详情;<br>4)I帧不需要参考其他画面而生成;<br>5)I帧是P帧和B帧的参考帧(其质量直接影响到同组中以后各帧的质量);<br>6)I帧是帧组GOP的基础帧(第一帧),在一组中只有一个I帧;<br>7)I帧不需要考虑运动矢量;<br>8)I帧所占数据的信息量比较大。</p><p><strong>P帧特点:</strong><br>1)P帧是I帧后面相隔1~2帧的编码帧;<br>2)P帧采用运动补偿的方法传送它与前面的I或P帧的差值及运动矢量(预测误差);<br>3)解码时必须将I帧中的预测值与预测误差求和后才能重构完整的P帧图像;<br>4)P帧属于前向预测的帧间编码。它只参考前面最靠近它的I帧或P帧;<br>5)P帧可以是其后面P帧的参考帧,也可以是其前后的B帧的参考帧;<br>6)由于P帧是参考帧,它可能造成解码错误的扩散;<br>7)由于是差值传送,P帧的压缩比较高。</p><p><strong>B帧特点：</strong><br>1）B帧是由前面的I或P帧和后面的P帧来进行预测的;<br>2）B帧传送的是它与前面的I或P帧和后面的P帧之间的预测误差及运动矢量;<br>3）B帧是双向预测编码帧;<br>4）B帧压缩比最高,因为它只反映并参考帧间运动主体的变化情况,预测比较准确;加大B帧的数量可以有效地提高视频数据的压缩比，但是在实时互动的环境下，过多的B帧会引起延时，因为B帧会过分的依赖于前后帧，在网络好的环境下，可以正常的传输帧，这样没有什么问题，但是在网络不好的时候，B帧会等待其他帧到来，会引起延时。<br>5）B帧不是参考帧,不会造成解码错误的扩散。</p><p>注:I、B、P各帧是根据压缩算法的需要，是人为定义的,它们都是实实在在的物理帧。一般来说，I帧的压缩率是7（跟JPG差不多），P帧是20，B帧可以达到50。可见使用B帧能节省大量空间，节省出来的空间可以用来保存多一些I帧，这样在相同码率下，可以提供更好的画质。</p><p>备注：</p><p>视频传输中会出现连个比较常见的现象，花屏 和 卡顿</p><p>(1)如果在GOP分组中的P帧丢失，会造成解码端的图像发生错误。这就是花屏。GOP一组帧呈现出的连贯效果，由于P帧丢失，它需要更新的部分就没有，所以无法正常呈现。故出现花屏现象。</p><p>(2)为了解决花屏的问题发生，我们可以将丢失 P帧 或是 I帧 的 GOP 丢掉（包含其中的所有帧），直到下一个I帧再重新刷新图像。但是由于这一帧丢掉了，所以会出现卡顿。</p><h2 id="H264压缩技术"><a href="#H264压缩技术" class="headerlink" title="H264压缩技术"></a>H264压缩技术</h2><p>H264的基本原理其实非常简单，我们就简单的描述一下H264压缩数据的过程。通过摄像头采集到的视频帧（按每秒 30 帧算），被送到 H264 编码器的缓冲区中。编码器先要为每一幅图片划分宏块。</p><p>H264采用的核心算法是<strong>帧内压缩和帧间压缩</strong>，帧内压缩是生成I帧的算法，帧间压缩是生成B帧和P帧的算法。</p><p><strong>帧内（**</strong>Intraframe）压缩也称为空间压缩（Spatialcompression）<strong>。当压缩一帧图像时，仅考虑本帧的数据而不考虑相邻帧之间的冗余信息，这实际上与静态图像压缩类似。</strong>帧内一般采用有损压缩算法**，由于帧内压缩是编码一个完整的图像，所以可以独立的解码、显示。帧内压缩一般达不到很高的压缩，跟编码jpeg差不多。</p><p><strong>帧间（**</strong>Interframe）压缩<strong>的原理是：相邻几帧的数据有很大的相关性，或者说前后两帧信息变化很小的特点。也即连续的视频其相邻帧之间具有冗余信息,根据这一特性，压缩相邻帧之间的冗余量就可以进一步提高压缩量，减小压缩比。帧间压缩也称为时间压缩（Temporalcompression），它通过比较时间轴上不同帧之间的数据进行压缩。</strong>帧间压缩一般是无损的**。帧差值（Framedifferencing）算法是一种典型的时间压缩法，它通过比较本帧与相邻帧之间的差异，仅记录本帧与其相邻帧的差值，这样可以大大减少数据量。</p><h3 id="压缩方式说明"><a href="#压缩方式说明" class="headerlink" title="压缩方式说明"></a>压缩方式说明</h3><p>Step1：分组，也就是将一系列变换不大的图像归为一个组，也就是一个序列，也可以叫GOP（画面组）；</p><p>Step2：定义帧，将每组的图像帧归分为I帧、P帧和B帧三种类型；</p><p>Step3：预测帧， 以I帧做为基础帧,以I帧预测P帧,再由I帧和P帧预测B帧;</p><p>Step4：数据传输， 最后将I帧数据与预测的差值信息进行存储和传输。</p><h4 id="划分宏块"><a href="#划分宏块" class="headerlink" title="划分宏块"></a>划分宏块</h4><p>H264默认是使用 16X16 大小的区域作为一个宏块，也可以划分成 8X8 大小。</p><p><img src="https://img-blog.csdnimg.cn/20200519205412771.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>划分好宏块后，计算宏块的象素值。</p><p><img src="https://img-blog.csdnimg.cn/20200519205412770.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>以此类推，计算一幅图像中每个宏块的像素值，所有宏块都处理完后如下面的样子。</p><p><img src="https://img-blog.csdnimg.cn/20200519205412807.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><ol><li><ol><li><strong>划分子块</strong></li></ol></li></ol><p>H264对比较平坦的图像使用 16X16 大小的宏块。但为了更高的压缩率，还可以在 16X16 的宏块上更划分出更小的子块。子块的大小可以是 8X16､ 16X8､ 8X8､ 4X8､ 8X4､ 4X4非常的灵活。</p><p><img src="https://img-blog.csdnimg.cn/20200519205412769.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>上幅图中，红框内的 16X16 宏块中大部分是蓝色背景，而三只鹰的部分图像被划在了该宏块内，为了更好的处理三只鹰的部分图像，H264就在 16X16 的宏块内又划分出了多个子块。</p><p><img src="https://img-blog.csdnimg.cn/20200519205412807.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>这样再经过帧内压缩，可以得到更高效的数据。下图是分别使用mpeg-2和H264对上面宏块进行压缩后的结果。其中左半部分为MPEG-2子块划分后压缩的结果，右半部分为H264的子块划压缩后的结果，可以看出H264的划分方法更具优势。</p><p><img src="https://img-blog.csdnimg.cn/20200519205412890.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>宏块划分好后，就可以对H264编码器缓存中的所有图片进行分组了。</p><h4 id="帧分组"><a href="#帧分组" class="headerlink" title="帧分组"></a>帧分组</h4><p>对于视频数据主要有两类数据冗余，一类是时间上的数据冗余，另一类是空间上的数据冗余。其中时间上的数据冗余是最大的。下面我们就先来说说视频数据时间上的冗余问题。</p><p>为什么说时间上的冗余是最大的呢？假设摄像头每秒抓取30帧，这30帧的数据大部分情况下都是相关联的。也有可能不止30帧的的数据，可能几十帧，上百帧的数据都是关联特别密切的。</p><p>对于这些关联特别密切的帧，其实我们只需要保存一帧的数据，其它帧都可以通过这一帧再按某种规则预测出来，所以说视频数据在时间上的冗余是最多的。</p><p>为了达到相关帧通过预测的方法来压缩数据，就需要将视频帧进行分组。那么如何判定某些帧关系密切，可以划为一组呢？我们来看一下例子，下面是捕获的一组运动的台球的视频帧，台球从右上角滚到了左下角。</p><p><img src="https://img-blog.csdnimg.cn/20200519205412855.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"><img src="https://img-blog.csdnimg.cn/20200519205412853.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>H264编码器会按顺序，每次取出两幅相邻的帧进行宏块比较，计算两帧的相似度。如下图：</p><p><img src="https://img-blog.csdnimg.cn/20200519205412856.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>通过宏块扫描与宏块搜索可以发现这两个帧的关联度是非常高的。进而发现这一组帧的关联度都是非常高的。因此，上面这几帧就可以划分为一组。<strong>其算法是：在相邻几幅图像画面中，一般有差别的像素只有*<strong>*<em>\</em>10%以内的点,亮度差值变化不超过2%，而色度差值的变化只有1%以内，我们认为这样的图可以分到一组。\</strong></strong></p><p>在这样一组帧中，经过编码后，我们只保留第一帧的完整数据，其它帧都通过参考上一帧计算出来。我们称第一帧为*<strong>*IDR／I帧**</strong>，其它帧我们称为*<strong>*P／B帧**</strong>，这样编码后的数据帧组我们称为*<strong>*GOP**</strong>。</p><h4 id="运动估计与补偿"><a href="#运动估计与补偿" class="headerlink" title="运动估计与补偿"></a>运动估计与补偿</h4><p>在H264编码器中将帧分组后，就要计算帧组内物体的运动矢量了。还以上面运动的台球视频帧为例，我们来看一下它是如何计算运动矢量的。</p><p>H264编码器首先按顺序从缓冲区头部取出两帧视频数据，然后进行宏块扫描。当发现其中一幅图片中有物体时，就在另一幅图的邻近位置（搜索窗口中）进行搜索。如果此时在另一幅图中找到该物体，那么就可以计算出物体的运动矢量了。下面这幅图就是搜索后的台球移动的位置。</p><p><img src="https://img-blog.csdnimg.cn/20200519205412855.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>通过上图中台球位置相差，就可以计算出台球运行的方向和距离。H264依次把每一帧中球移动的距离和方向都记录下来就成了下面的样子。</p><p><img src="https://img-blog.csdnimg.cn/20200519205412856.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>运动矢量计算出来后，将相同部分（也就是绿色部分）减去，就得到了补偿数据。我们最终只需要将补偿数据进行压缩保存，以后在解码时就可以恢复原图了。压缩补偿后的数据只需要记录很少的一点数据。如下所示：</p><p><img src="https://img-blog.csdnimg.cn/20200519205412858.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>我们把运动矢量与补偿称为<strong>帧间压缩技术</strong>，它解决的是视频帧在时间上的数据冗余。除了帧间压缩，帧内也要进行数据压缩，帧内数据压缩解决的是空间上的数据冗余。下面我们就来介绍一下帧内压缩技术。</p><h4 id="帧内预测"><a href="#帧内预测" class="headerlink" title="帧内预测"></a>帧内预测</h4><p>人眼对图象都有一个识别度，对低频的亮度很敏感，对高频的亮度不太敏感。所以基于一些研究，可以将一幅图像中人眼不敏感的数据去除掉。这样就提出了帧内预测技术。</p><p>H264的帧内压缩与JPEG很相似。一幅图像被划分好宏块后，对每个宏块可以进行 9 种模式的预测。找出与原图最接近的一种预测模式。</p><p><img src="https://img-blog.csdnimg.cn/20200519205412887.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>下面这幅图是对整幅图中的每个宏块进行预测的过程。</p><p><img src="https://img-blog.csdnimg.cn/20200519205412889.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>帧内预测后的图像与原始图像的对比如下：</p><p><img src="https://img-blog.csdnimg.cn/20200519205412888.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>然后，将原始图像与帧内预测后的图像相减得残差值。</p><p><img src="https://img-blog.csdnimg.cn/20200519205412858.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>再将我们之前得到的预测模式信息一起保存起来，这样我们就可以在解码时恢复原图了。效果如下：</p><p><img src="https://img-blog.csdnimg.cn/20200519205412884.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>经过帧内与帧间的压缩后，虽然数据有大幅减少，但还有优化的空间。</p><h4 id="对残差数据做DCT"><a href="#对残差数据做DCT" class="headerlink" title="对残差数据做DCT"></a>对残差数据做DCT</h4><p>可以将残差数据做整数离散余弦变换，去掉数据的相关性，进一步压缩数据。如下图所示，左侧为原数据的宏块，右侧为计算出的残差数据的宏块。</p><p><img src="https://img-blog.csdnimg.cn/20200519205412857.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>将残差数据宏块数字化后如下图所示：</p><p><img src="https://img-blog.csdnimg.cn/20200519205412884.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>将残差数据宏块进行 DCT 转换。</p><p><img src="https://img-blog.csdnimg.cn/20200519205412887.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>去掉相关联的数据后，我们可以看出数据被进一步压缩了。</p><p><img src="https://img-blog.csdnimg.cn/20200519205412889.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>做完 DCT 后，还不够，还要进行 CABAC 进行无损压缩。</p><h4 id="CABAC"><a href="#CABAC" class="headerlink" title="CABAC"></a>CABAC</h4><p>上面的帧内压缩是属于有损压缩技术。也就是说图像被压缩后，无法完全复原。而CABAC属于无损压缩技术。</p><p>无损压缩技术大家最熟悉的可能就是哈夫曼编码了，给高频的词一个短码，给低频词一个长码从而达到数据压缩的目的。MPEG-2中使用的VLC就是这种算法，我们以 A-Z 作为例子，A属于高频数据，Z属于低频数据。看看它是如何做的。</p><p><img src="https://img-blog.csdnimg.cn/20200519205412891.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>CABAC也是给高频数据短码，给低频数据长码。同时还会根据上下文相关性进行压缩，这种方式又比VLC高效很多。其效果如下：</p><p><img src="https://img-blog.csdnimg.cn/20200519205412889.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>现在将 A-Z 换成视频帧，它就成了下面的样子。</p><p><img src="https://img-blog.csdnimg.cn/20200519205412890.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>从上面这张图中明显可以看出采用 CACBA 的无损压缩方案要比 VLC 高效的多。</p><h1 id="H264分层结构"><a href="#H264分层结构" class="headerlink" title="H264分层结构"></a>H264分层结构</h1><p>H264的主要目标是为了有高的视频压缩比和良好的网络亲和性，为了达成这两个目标，H264的解决方案是将系统框架分为两个层面，分别是视频编码层面（VCL）和网络抽象层面（NAL），如图；</p><p><img src="https://img-blog.csdnimg.cn/20200519205514394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>H.264原始码流(裸流)是由一个接一个NALU组成，它的功能分为两层，VCL(视频编码层)和 NAL(网络抽象层).</p><table><thead><tr><th><code> </code></th><th><code>VCL(Video Coding Layer) + NAL(Network Abstraction Layer).</code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><ol><li>VCL：包括核心压缩引擎和块，宏块和片的语法级别定义，设计目标是尽可能地独立于网络进行高效的编码；</li><li>NAL：负责将VCL产生的比特字符串适配到各种各样的网络和多元环境中，覆盖了所有片级以上的语法级别。</li></ol><p>因为H264最终还是要在网络上进行传输，在传输的时候，网络包的最大传输单元是1500字节，一个H264的帧往往是大于1500字节的，所以需要将一个帧拆成多个包进行传输。这些拆包、组包等工作都在NAL层去处理。</p><h2 id="H264码流结构"><a href="#H264码流结构" class="headerlink" title="H264码流结构"></a>H264码流结构</h2><p>在VCL进行数据传输或存储之前，这些编码的VCL数据，被映射或封装进NAL单元（NALU）。</p><p>H264码流是由一个个的NAL单元组成，其中SPS、PPS、IDR和SLICE是NAL单元某一类型的数据。</p><p><img src="https://img-blog.csdnimg.cn/20200519205514404.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><h3 id="1-H264的NAL单元"><a href="#1-H264的NAL单元" class="headerlink" title="1. H264的NAL单元"></a>1. <strong>H264的NAL单元</strong></h3><p>一个NALU = 一组对应于视频编码的NALU头部信息 + 一个原始字节序列负荷(RBSP,Raw Byte Sequence Payload).</p><p>如图所示，下图中的NALU的头 + RBSP 就相当于一个NALU(Nal Unit),每个单元都按独立的NALU传送。H.264的结构全部都是以NALU为主，理解了NALU，就理解了H.264的结构。<br>一个原始的H.264 NALU 单元常由 [StartCode] [NALU Header] [NALU Payload] 三部分组成，其中 Start Code 用于标示这是一个NALU 单元的开始，必须是”00 00 00 01” 或”00 00 01”</p><p><img src="https://img-blog.csdnimg.cn/20200519205514403.jpeg" alt="img"></p><p><strong><em>\</em>3字节的0x000001只有一种场合下使用，就是一个完整的帧被编为多个slice的时候，包含这些slice的nalu使用3字节起始码。其余场合都是4字节的。**</strong></p><h4 id="NAL-Header"><a href="#NAL-Header" class="headerlink" title="NAL Header"></a>NAL Header</h4><p>NAL单元的头部是由forbidden_bit(1bit)，nal_reference_bit(2bits)（优先级），nal_unit_type(5bits)（类型）三个部分组成的。</p><p>1、F(forbiden):禁止位，占用NAL头的第一个位，当禁止位值为1时表示语法错误；</p><p>2、NRI:参考级别，占用NAL头的第二到第三个位；值越大，该NAL越重要。</p><p>3、Type:Nal单元数据类型，也就是标识该NAL单元的数据类型是哪种，占用NAL头的第四到第8个位；</p><p><img src="https://img-blog.csdnimg.cn/20200519205818705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>举例来说：</p><p>00 00 00 01 06: SEI信息 </p><p>00 00 00 01 67: 0x67&amp;0x1f = 0x07 :SPS</p><p>00 00 00 01 68: 0x68&amp;0x1f = 0x08 :PPS</p><p>00 00 00 01 65: 0x65&amp;0x1f = 0x05: IDR Slice</p><p>​    在具体介绍NAL数据类型前，有必要知道NAL分为VCL和非VCL的NAL单元。其中SPS、SEI、PPS等非VCL的NAL参数对解码和显示视频都是很有用的。</p><p>​     而另外一个需要了解的概念就是参数集（Parameter sets），参数集是携带解码参数的NAL单元，参数集对于正确解码是非常重要的，在一个有损耗的传输场景中，传输过程中比特列或包可能丢失或损坏，在这种网络环境下，参数集可以通过高质量的服务来发送，比如向前纠错机制或优先级机制。Parameter sets与其之外的句法元素之间的关系如图9所示：</p><p><img src="https://img-blog.csdnimg.cn/20200519205818671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>每种类型都有代表一种数据类型，比较重要的以下几种做个简单的介绍：</p><p>1、非VCL的NAL数据类型：</p><p>1）、SPS（序列参数集）：SPS对如标识符、帧数以及参考帧数目、解码图像尺寸和帧场模式等解码参数进行标识记录。</p><p>2）、PPS（图像参数集）：PPS对如熵编码类型、有效参考图像的数目和初始化等解码参数进行标志记录。</p><p>3）、SEI(补充增强信息)：这部分参数可作为H264的比特流数据而被传输，每一个SEI信息被封装成一个NAL单元。SEI对于解码器来说可能是有用的，但是对于基本的解码过程来说，并不是必须的。</p><p>@：先标记一下，SPS、PPS内容是编码器给的。（出处的话，慢慢研究）</p><p>2、VCL的NAL数据类型</p><p>1）、 头信息块，包括宏块类型，量化参数，运动矢量。这些信息是最重要的，因为离开他们，被的数据块种的码元都无法使用。该数据分块称为A类数据分块。</p><p>2）、 帧内编码信息数据块，称为B类数据分块。它包含帧内编码宏块类型，帧内编码系数。对应的slice来说，B类数据分块的可用性依赖于A类数据分块。和帧间编码信息数据块不通的是，帧内编码信息能防止进一步的偏差，因此比帧间编码信息更重要。</p><p>3）、 帧间编码信息数据块，称为C类数据分块。它包含帧间编码宏块类型，帧间编码系数。它通常是slice种最大的一部分。帧间编码信息数据块是不重要的一部分。它所包含的信息并不提供编解码器之间的同步。C类数据分块的可用性也依赖于A类数据分块，但于B类数据分块无关。</p><p>以上三种数据块每种分割被单独的存放在一个NAL单元中，因此可以被单独传输。</p><h4 id="RBSP-原始字节序列负荷"><a href="#RBSP-原始字节序列负荷" class="headerlink" title="RBSP**原始字节序列负荷"></a>RBSP**原始字节序列负荷</h4><p><img src="https://img-blog.csdnimg.cn/20200519205818704.jpeg" alt="img"></p><p>序列举例</p><p><img src="https://img-blog.csdnimg.cn/20200519205818689.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p><strong><em>\</em>SODB*****</strong>*与*<strong>**</strong>*RBSP****<br>SODB 数据比特串 -&gt; 是编码后的原始数据.<br>RBSP 原始字节序列载荷 -&gt; 在原始编码数据的后面添加了 结尾比特。一个 bit“1”若干比特“0”，以便字节对齐。<img src="https://img-blog.csdnimg.cn/20200519205818689.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>（1）SODB ，String Of Data Bits 原始数据比特流</p><p>​    因为它是流的形式，所以长度不一定是8倍数，它是由 VLC 层产生的。由于我们计算机是以8倍数去处理数据所以计算机在处理H264时，就需要 RBSP。</p><p>（2）RBSP，SODB + tailing bits （原始字节序列载荷）</p><p>​    由于它是一个压缩流，SODB 不知道是在何处结束，所以算法在SODB最后一位补一个1，没有按字节对齐的则补 0。</p><p>（3）EBSP （扩展字节序列载荷）</p><p>​    在生成压缩流之后，在每一帧的开头加一个起始位，这个起始位一般是 00 00 00 01 或者是 00 00 01。所以在h264码流中规定每有两个连续的00 00，就增加一个0x03。</p><p>补充：EBSP 和 RBSP的区别</p><p>​    A、NALU的主体涉及到三个重要的名词，分别为EBSP、RBSP和SODB。其中EBSP完全等价于NALU主体，而且它们三个的结构关系为：EBSP包含RBSP，RBSP包含SODB。</p><p>​    在h264的文档中，并没有EBSP这一名词出现，但是在h264的官方参考软件JM里，却使用了EBSP。NALU的组成部分为：</p><p>​    NALU = NALU Header + RBSP</p><p>​    其实严格来说，这个等式是不成立的，因为RBSP并不等于NALU刨去NALU Header。严格来说，NALU的组成部分应为：</p><p>​    NALU = NALU Header + EBSP</p><p>​    其中的EBSP为扩展字节序列载荷（Encapsulated Byte Sequence Payload），而RBSP为原始字节序列载荷（Raw Byte Sequence Payload）。</p><p>​     B、那为什么要弄一个EBSP呢？</p><p>​    EBSP相较于RBSP，多了防止竞争的一个字节：0x03。</p><p>​    我们知道，NALU的起始码为0x000001或0x00000001，同时H264规定，当检测到0x000000时，也可以表示当前NALU的结束。那这样就会产生一个问题，就是如果在NALU的内部，出现了0x000001或0x000000时该怎么办？</p><p>​    所以H264就提出了“防止竞争”这样一种机制，当编码器编码完一个NAL时，应该检测NALU内部，是否出现如下左侧的四个序列。当检测到它们存在时，编码器就在最后一个字节前，插入一个新的字节：0x03。</p><p>​    这样一来，当我们拿到EBSP时，就需要检测EBSP内是否有序列：0x000003，如果有，则去掉其中的0x03。这样一来，我们就能得到原始字节序列载荷：RBSP。</p><h4 id="SPS-和-PPS"><a href="#SPS-和-PPS" class="headerlink" title="SPS 和 PPS"></a>SPS 和 PPS</h4><p>SPS即Sequence Paramater Set，又称作序列参数集。SPS中保存了一组编码视频序列(Coded video sequence)的全局参数。存放包括：帧数、参考帧数目、解码图像尺寸、帧场编码模式选择标识等。所谓的编码视频序列即原始视频的一帧一帧的像素数据经过编码之后的结构组成的序列。而每一帧的编码后数据所依赖的参数保存于图像参数集中。一般情况SPS和PPS的NAL Unit通常位于整个码流的起始位置。但在某些特殊情况下，在码流中间也可能出现这两种结构，主要原因可能为：</p><p>解码器需要在码流中间开始解码；<br>编码器在编码的过程中改变了码流的参数（如图像分辨率等）；<br>H.264中另一重要的参数集合为图像参数集Picture Paramater Set(PPS)。和图像相关的参数集，存放包括：熵编码模式选择标识、片组数目、初始量化参数和去方块滤波系数调整标识等。通常情况下，PPS类似于SPS，在H.264的裸码流中单独保存在一个NAL Unit中，只是PPS NAL Unit的nal_unit_type值为8；而在封装格式中，PPS通常与SPS一起，保存在视频文件的文件头中。</p><p>在一组帧之前，首先要收到SPS 和 PPS ，不然的话是无法解码的。这两组数据划分为I帧，是不能丢的。</p><h4 id="H264的NAL单元与片，宏之间的联系"><a href="#H264的NAL单元与片，宏之间的联系" class="headerlink" title="H264的NAL单元与片，宏之间的联系"></a>H264的NAL单元与片，宏之间的联系</h4><p>​     其实到这里可能就比较难理解了，为什么数据NAL单元中有这么多数据类型，这个SLICE又是什么东西，为什么不直接是编码后出来的原始字节序列载荷，所以我觉得在这里再讲述帧所细分的一些片和宏的概念应该是比较合适的，也是能够参照上下文更能理解这些概念的位置，又能给这些困惑做一个合理一点的解释，所以在此做一个描述：</p><p>1帧（一幅图像） = 1~N个片（slice） //也可以说1到多个片为一个片组</p><p>1个片 = 1~N个宏块（Marcroblock）</p><p>1个宏块 = 16X16的YUV数据（原始视频采集数据）</p><p>从数据层次角度来说，一幅原始的图片可以算作广义上的一帧，帧包含片组和片，片组由片来组成，片由宏块来组成，每个宏块可以是4<em>4、8</em>8、16*16像素规模的大小，它们之间的联系如图10所示。每个片都是一个独立的编码单位。</p><p><img src="https://img-blog.csdnimg.cn/20200519205851993.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>​                         图10</p><p>从容纳数据角度来说，NAL单元除了容纳Slice编码的码流外，还可以容纳其他数据，这也就是为什么有SPS、PPS等这些数据出现的原因，并且这些数据在传输H264码流的过程中起到不可或缺的作用，具体作用上面也是有讲到的。</p><p>那么也就可以对下面这些概念做一个大小的排序了：</p><p>​         序列&gt;图像&gt;片&gt;宏&gt;像素（当然还有片组、亚宏块等等这些概念，初步了解就不了解这么深了，后面再慢慢研究）</p><p>同时有几点需要说明一下，这样能便于理解NAL单元：</p><p>（1）、如果不采用 FMO（灵活宏块排序） 机制，则一幅图像只有一个片组；</p><p>（2）、如果不使用多个片，则一个片组只有一个片；</p><p>（3）、如果不采用 DP（数据分割）机制，则一个片就是一个 NALU，一个 NALU 也就是一个片。</p><p>  否则，一个片的组成需要由 三个 NALU 组成，也就是上面说到的A、B、C类数据块。</p><p>这时候在看下面这幅码流数据分层图11就比较能理解整体的码流结构组成了；</p><p><img src="https://img-blog.csdnimg.cn/2020051920585237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>​                            图11</p><p>  如我们所见，每个分片也包含着头和数据两部分，分片头中包含着分片类型、分片中的宏块类型、分片帧的数量以及对应的帧的设置和参数等信息，而分片数据中则是宏块，这里就是我们要找的存储像素数据的地方；宏块是视频信息的主要承载者，因为它包含着每一个像素的亮度和色度信息。视频解码最主要的工作则是提供高效的方式从码流中获得宏块中的像素阵列。宏块数据的组成如下图12所示：</p><p><img src="https://img-blog.csdnimg.cn/202005192058526.png" alt="img"></p><p>​                  图12</p><p>  从上图中，可以看到，宏块中包含了宏块类型、预测类型、Coded Block Pattern、Quantization Parameter、像素的亮度和色度数据集等等信息。</p><p>至此，我们对 H.264 的码流数据结构应该有了一个大致的了解。</p><h4 id="Slice-片"><a href="#Slice-片" class="headerlink" title="Slice(**片**)"></a>Slice(*<em>*</em>片*<em>*</em>)</h4><p>如图所示，NALU的主体中包含了Slice(片).</p><table><thead><tr><th></th><th><code>一个片 = Slice Header + Slice Data</code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>片是H.264提出的新概念，通过编码图片后切分通过高效的方式整合出来的概念。一张图片有一个或者多个片，而片由NALU装载并进行网络传输的。但是NALU不一定是切片，这是充分不必要条件，因为 NALU 还有可能装载着其他用作描述视频的信息.</p><p><strong><em>\</em>那么为什么要设置片呢*****</strong>*?****<br>设置片的目的是为了限制误码的扩散和传输，应使编码片相互间是独立的。某片的预测不能以其他片中的宏块为参考图像，这样某一片中的预测误差才不会传播到其他片中。</p><p>可以看到上图中，每个图像中，若干宏块(Macroblock)被排列成片。一个视频图像可编程一个或更多个片，每片包含整数个宏块 (MB),每片至少包含一个宏块。<br><strong><em>\</em>片有一下五种类型*****</strong>*:****</p><table><thead><tr><th><strong><em>\</em>片**</strong></th><th><strong><em>\</em>意义**</strong></th></tr></thead><tbody><tr><td>I 片</td><td>只包含I宏块</td></tr><tr><td>P 片</td><td>包含P和I宏块</td></tr><tr><td>B 片</td><td>包含B和I宏块</td></tr><tr><td>SP 片</td><td>包含P 和/或 I宏块,用于不同码流之间的切换</td></tr><tr><td>SI 片</td><td>一种特殊类型的编码宏块</td></tr></tbody></table><h4 id="宏块-Macroblock"><a href="#宏块-Macroblock" class="headerlink" title="宏块**(Macroblock)"></a>宏块*<em>*</em>(Macroblock)</h4><p>刚才在片中提到了宏块.<strong><em>\</em>那么什么是宏块呢？**</strong><br>宏块是视频信息的主要承载者。一个编码图像通常划分为多个*<strong>*宏块**</strong>组成.包含着每一个像素的亮度和色度信息。视频解码最主要的工作则是提供高效的方式从码流中获得宏块中像素阵列。</p><table><thead><tr><th><code>1</code></th><th><code>一个宏块 = 一个16*16的亮度像素 + 一个8×8Cb + 一个8×8Cr彩色像素块组成。(YCbCr 是属于 YUV 家族的一员,在YCbCr 中 Y 是指亮度分量，Cb 指蓝色色度分量，而 Cr 指红色色度分量)</code></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><table><thead><tr><th><strong><em>\</em>宏块分类**</strong></th><th><strong><em>\</em>意义**</strong></th></tr></thead><tbody><tr><td>I 宏块</td><td>利用从<strong>当前片</strong>中已解码的像素作为参考进行帧内预测</td></tr><tr><td>P 宏块</td><td>利用前面已编码图像作为参考进行帧内预测，一个帧内编码的宏块可进一步作宏块的分割:即16×16.16×8.8×16.8×8亮度像素块。如果选了8×8的子宏块，则可再分成各种子宏块的分割，其尺寸为8×8，8×4，4×8，4×4</td></tr><tr><td>B 宏块</td><td>利用双向的参考图像(当前和未来的已编码图像帧)进行帧内预测</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/202005192058526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><p><strong><em>\</em>图*****</strong>*2.1*<strong>**</strong>*句发元素的分层结构****,在 H.264 中，句法元素共被组织成 序列、图像、片、宏块、子宏块五个层次。<br>句法元素的分层结构有助于更有效地节省码流。例如，再一个图像中，经常会在各个片之间有相同的数据，如果每个片都同时携带这些数据，势必会造成码流的浪费。更为有效的做法是将该图像的公共信息抽取出来，形成图像一级的句法元素，而在片级只携带该片自身独有的句法元素。</p><p><img src="https://img-blog.csdnimg.cn/202005192058525.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"><br><strong><em>\</em>图*****</strong>*2.2*<strong>**</strong>*宏块的句法单*<strong>**</strong>*元****</p><p><img src="https://img-blog.csdnimg.cn/2020051920585246.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p><table><thead><tr><th><strong><em>\</em>宏块分类**</strong></th><th><strong><em>\</em>意义**</strong></th></tr></thead><tbody><tr><td>mb_type</td><td>确定该 MB 是帧内或帧间(P 或 B)编码模式，确定该 MB 分割的尺寸</td></tr><tr><td>mb_pred</td><td>确定帧内预测模式(帧内宏块)确定表 0 或表 1 参考图 像，和每一宏块分割的差分编码的运动矢量(帧间宏块，除 8×8 宏块分割的帧内 MB)</td></tr><tr><td>sub_mb_pred</td><td>(只对 8×8MB 分割的帧内 MB)确定每一子宏块的子宏 块分割，每一宏块分割的表 0 和/或表 1 的参考图象;每一 宏块子分割的差分编码运动矢量。</td></tr><tr><td>coded_block_pattern</td><td>指出哪个 8×8 块(亮度和彩色)包 编码变换系数</td></tr><tr><td>mb_qp_delta</td><td>量化参数的改变值</td></tr><tr><td>residual</td><td>预测后对应于残差图象取样的编码变换系数</td></tr></tbody></table><h4 id="图像-场和-帧"><a href="#图像-场和-帧" class="headerlink" title="图像**,**场和**帧**"></a>图像*<em>*</em>,*<em>*</em>场和*<em>*</em>帧**</h4><p>图像是个集合概念，顶 场、底场、帧都可以称为图像。对于H.264 协议来说，我们平常所熟悉的那些称呼，例如： I 帧、P 帧、B帧等等，实际上都是我们把图像这个概念具体化和细小化了。我们 在 H.264里提到的“帧”通常就是指不分场的图像；</p><p>视频的一场或一帧可用来产生一个*<strong>*编码图像**</strong>。一帧通常是一个完整的图像。当采集视频信号时，如果采用隔行扫描(奇.偶数行),则扫描下来的一帧图像就被分为了两个部分,这每一部分就被称为 <strong><em>\</em>[*****</strong>*场*<strong>**</strong>*]*<strong>*,根据次序氛围: *</strong>*[*<strong>**</strong>*顶场*<strong>**</strong>*]*<strong>* 和 *</strong>*[*<strong>**</strong>*底场*<strong>**</strong>*]****。</p><table><thead><tr><th><strong><em>\</em>方式**</strong></th><th><strong><em>\</em>作用域**</strong></th></tr></thead><tbody><tr><td>帧编码方式</td><td>活动量较小或者静止的图像宜采用</td></tr><tr><td>场编码方式</td><td>活动量较大的运动图像</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/20200519205852104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b3l1bmZlaTEyMw==,size_16,color_FFFFFF,t_70" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 音视频基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> h264 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ss</title>
      <link href="ss.html"/>
      <url>ss.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
